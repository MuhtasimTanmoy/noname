var searchIndex = JSON.parse('{\
"main":{"doc":"","t":[3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,11,11,11,11,11,11],"n":["Cli","augment_args","augment_args_for_update","borrow","borrow_mut","debug","deref","deref_mut","drop","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","main","parse","path","private_inputs","public_inputs","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["main","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","prints debug information (defaults to false)","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","path to the .no file","private inputs in a JSON format using decimal values (e.g. …","public inputs in a JSON format using decimal values (e.g. {…","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4],"f":[0,[1,1],[1,1],[[]],[[]],0,[2],[2],[2],[[]],[3,[[6,[4,5]]]],[3,[[6,[4,5]]]],[[],2],[[]],[[],1],[[],1],[[],7],[[8,9,9,10],7],0,0,0,[[],6],[[],6],[[],11],[[4,3],[[6,[5]]]],[[4,3],[[6,[5]]]],[[]]],"p":[[6,"Command"],[15,"usize"],[3,"ArgMatches"],[3,"Cli"],[3,"Error"],[4,"Result"],[6,"Result"],[15,"str"],[3,"Inputs"],[15,"bool"],[3,"TypeId"]]},\
"noname":{"doc":"This is a high-level language to write circuits that you …","tn":["asm","boolean","circuit_writer","compiler","constants","error","field","helpers","imports","inputs","lexer","parser","prover","stdlib","tokens","type_checker","var","witness","OrderedHashSet","borrow","borrow_mut","default","deref","deref_mut","drop","from","generate_asm","init","insert","into","is_empty","iter","len","pos","try_from","try_into","type_id","vzip","and","is_valid","neg","Cell","CircuitWriter","DoubleGeneric","Gate","GateKind","LocalEnv","NotWired","Poseidon","Wired","Wiring","add_constant","add_gate","add_private_inputs","add_public_inputs","add_public_outputs","add_var","asm","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","coeffs","col","compiled_gates","compute_constant","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","equivalent","finalized","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","generate_circuit","get_var","init","init","init","init","init","init","into","into","into","into","into","into","is_in_scope","main_args","nest","new","new_internal_var","next_variable","note","num_gates","partial_cmp","pop","private_input_indices","public_input_size","public_output","reassign_var","row","rows_of_vars","source","span","to_kimchi_gate","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wiring","witness_vars","0","0","compile","0","1","Field","NUM_REGISTERS","Span","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deref_mut","drop","end","eq","equivalent","fmt","from","get_hash","hash","init","into","is_empty","len","merge_with","partial_cmp","start","to_dec_string","to_owned","try_from","try_into","type_id","vzip","ArgumentTypeMismatch","ArrayIndexOutOfBounds","AssertionFailed","CannotComputeExpression","CannotConvertToField","ConstantInOutput","DuplicateDefinition","DuplicateModule","Error","ErrorKind","ExpectedConstant","ExpectedToken","ExpectedUnitExpr","FunctionReturnsType","InvalidArraySize","InvalidAssignmentExpression","InvalidAttribute","InvalidConstType","InvalidEndOfLine","InvalidExpression","InvalidField","InvalidFnCall","InvalidFunctionName","InvalidFunctionSignature","InvalidIdentifier","InvalidModule","InvalidPath","InvalidRangeSize","InvalidStatement","InvalidStructField","InvalidStructFieldType","InvalidToken","InvalidType","InvalidTypeName","InvalidWitness","KimchiProver","KimchiSetup","KimchiVerifier","LocalVariableNotFound","MismatchStructFields","MismatchType","MissingArg","MissingExpression","MissingPublicOutput","MissingReturn","MissingToken","MissingType","NoArgsInMain","PrivateInputNotUsed","PublicOutputReserved","ReservedType","Result","ReturnTypeMismatch","StdImport","TestError","UndefinedField","UndefinedFunction","UndefinedModule","UndefinedStruct","UndefinedVariable","UnexpectedReturn","UnusedInput","UseAfterFn","WrongArgumentType","WrongNumberOfArguments","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","help","init","init","into","into","kind","labels","provide","provide","source","span","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","arg_name","expected_args","expected_ty","fn_name","observed_args","observed_ty","add","equal","sub","PrettyField","poseidon","pretty","BuiltIn","FuncInScope","FuncType","GlobalEnv","Library","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","functions","init","init","into","into","main_args","modules","resolve_global_imports","resolve_imports","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","1","1","0","ExtField","Inputs","Inputs","IoError","ParsingError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","from","from","from","init","init","into","into","parse_inputs","provide","source","to_dec_string","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Ampersand","BigInt","Colon","Comma","Comment","Const","Const","DoubleColon","DoubleEqual","DoublePeriod","Else","Equal","Exclamation","False","Fn","For","Greater","Hex","Identifier","If","In","Keyword","Keyword","LeftBracket","LeftCurlyBracket","LeftParen","Less","Let","LexerCtx","Minus","Mut","Period","Pipe","Plus","Pub","Return","RightArrow","RightBracket","RightCurlyBracket","RightParen","SemiColon","Slash","Star","Struct","Token","TokenKind","True","Type","Use","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","kind","new_token","parse","parse","span","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","AST","Addition","Array","ArrayAccess","ArrayDeclaration","Assign","Assignment","Attribute","AttributeKind","BigInt","BigInt","Bool","Bool","BoolAnd","BoolNot","BoolOr","Comment","Comment","Const","Const","Custom","CustomType","CustomTypeDeclaration","Division","Equality","Expr","Expr","ExprKind","Field","FnCall","For","FuncArg","Function","Function","FunctionSig","Ident","Identifier","Multiplication","Negated","Op","Op2","ParserCtx","Path","Pub","Range","Return","Root","RootKind","Stmt","StmtKind","Struct","Struct","StructAccess","Subtraction","Ty","TyKind","Use","arguments","arguments","attribute","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_type","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_main","is_public","is_public","is_valid_fn_name","is_valid_fn_type","kind","kind","kind","kind","kind","last_span","last_token","len","name","name","name","name","name","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_args","parse_const","parse_fn_body","parse_fn_return_type","parse_maybe","parse_name","parse_path","parse_type","path","range","reserved_types","return_type","return_type","span","span","span","span","span","span","span","span","span","span","span","span","span","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","1","1","1","1","2","args","lhs","name","rhs","0","0","0","0","0","0","0","0","body","lhs","mutable","range","rhs","var","0","0","1","ProverIndex","VerifierIndex","asm","borrow","borrow","borrow_mut","borrow_mut","compile_and_prove","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","prove","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","BUILTIN_FNS","ImportedModule","borrow","borrow_mut","clone","clone_into","crypto","deref","deref_mut","drop","fmt","from","functions","init","into","name","parse_fn_sigs","parse_std_import","span","to_owned","try_from","try_into","type_id","vzip","CRYPTO_FNS","poseidon","Tokens","borrow","borrow_mut","bump","bump_err","bump_expected","deref","deref_mut","drop","fmt","from","init","into","new","peek","peeked","try_from","try_into","type_id","vzip","TAST","TypeEnv","TypeInfo","analyze","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_block","check_stmt","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","disabled","drop","drop","drop","fmt","fmt","from","from","from","get_type","get_type_info","global_env","init","init","init","into","into","into","is_in_scope","mutable","mutable","nest","new","new","new_mut","pop","span","store_type","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","typ","type_id","type_id","type_id","typecheck_fn_call","vzip","vzip","vzip","ArrayOrTuple","Cell","CellValues","CellVar","Const","ConstOrCell","ConstOrCell","Constant","Constant","External","Hint","HintFn","Inverse","LinearCombination","Mul","PublicOutput","Struct","Value","Var","VarKind","array_or_tuple","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","const_or_cell","const_or_cell","constant","constrain","cst","cvar","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get_hash","has_constants","has_constants","hash","idx","index","index","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_const_or_cells","into_const_or_cells","is_const","is_empty","is_empty","is_one","is_zero","kind","len","len","new","new","new","new","new_array","new_cell","new_constant","new_constant","new_struct","new_var","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","1","1","1","0","0","0","CompiledCircuit","Witness","WitnessEnv","add_value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_values","compute_var","debug","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","generate_witness","get_external","init","init","init","into","into","into","is_empty","len","to_kimchi_witness","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var_values","vzip","vzip","vzip"],"q":["noname","","","","","","","","","","","","","","","","","","noname::asm","","","","","","","","","","","","","","","","","","","","noname::boolean","","","noname::circuit_writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::circuit_writer::Wiring","","noname::compiler","noname::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::error::ErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::field","","","noname::helpers","","","noname::imports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::imports::FuncInScope","","","","noname::inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::inputs::ParsingError","","noname::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::lexer::TokenKind","","","","","","","noname::parsernoname::parser::ExprKind","","","","","","","","","","","","","","","","","","noname::parser::RootKind","","","","","noname::parser::StmtKind","","","","","","","","","noname::parser::TyKind","","","noname::prover","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::stdlib","","","","","","","","","","","","","","","","","","","","","","","","noname::stdlib::crypto","","noname::tokens","","","","","","","","","","","","","","","","","","","","noname::type_checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::varnoname::var::ConstOrCell","","noname::var::Value","","","","","","","","","","noname::var::VarKind","","","noname::witness","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ASM-like language:","Custom types","","","","","","","","Used to parse public and private inputs to a program.","","","This module contains the prover.","","Since std::iter::Peekable in Rust advances the iterator, I …","","","","Very dumb way to write an ordered hash set.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Is used to help functions access their scoped variables. …","Not yet wired (just indicates the position of the cell …","","The wiring (associated to different spans)","","This should be called only when you want to constrain a …","creates a new gate, and the associated row in the …","","","","Stores type information about a local variable. Note that …","","","","","","","","","","","","","","","","","","","","","","","col -&gt; (row, col) Coefficients","","Returns the compiled gates of the circuit.","","","","","","","","","","","","","","","","","","","","","","","","Once this is set, you can generate a witness (and can’t …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieves type information on a variable, given a name. If …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a scope is a prefix of our scope.","Used during the witness generation to check public and …","Enters a scoped block.","Creates a new LocalEnv","","This is used to give a distinct number to each variable …","A note on why this was added","","","Exits a scoped block.","Indexes used by the private inputs (this is useful to …","Size of the public input.","If a public output is set, this will be used to store its …","","","The execution trace table with vars as placeholders. It is …","The source code that created this circuit. Useful for …","The place in the original source code that created that …","","","","","","","","","","","","","","","","","","","Type of gate","","","","","","","","","","","","","The wiring of the circuit. It is created during circuit …","This is how you compute the value of each variable during …","","","","","","We use the scalar field of Vesta as our circuit field.","Number of columns in the execution trace.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two field elements","This takes variables that can be anything, and returns a …","Subtracts two variables, we only support variables that …","A trait to display Field in pretty ways.","","Print a field in a negative form if it’s past the half …","signature of the function","","","This seems to be used by both the type checker and the AST","path, and signature of the function","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","the functions present in the scope contains at least the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the arguments expected by main","stores the imported modules","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Allows constants to be defined","","","","","The <code>else</code> keyword","","","The boolean value <code>false</code>","A function","The <code>for</code> keyword","","","","The <code>if</code> keyword","The <code>in</code> keyword for iterating","","","","","","","New variable","","","The <code>mut</code> keyword for mutable variables","","","","Public input","Return from a function","","","","","","","","Allows custom structs to be defined","","","The boolean value <code>true</code>","","Importing a library","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An array of a fixed size.","","","","","","","This could be the same as Field, but we use this to also …","","A boolean (<code>true</code> or <code>false</code>).","","","","","","","","","Custom / user-defined types","","","","","","","","The main primitive type. ’Nuf said.","","","","","","","","","","","","","","","","","","Things you can have in a scope (including the root scope).","","","","","","","","","","","(pub, ident, type)","(pub, ident, typeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Used mainly for error reporting, when we don’t have a …","","","","","","","","Parses until it finds something it doesn’t know, then …","","","Parse a function, without the <code>fn</code> keyword.","Returns a list of statement parsed until seeing the end of …","","","","","","","","","","Parses a path from a list of tokens.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns a proof and a public output","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Takes a list of function signatures (as strings) and their …","Parses the rest of a <code>use std::</code> statement. Returns a list …","","","","","","","","","","","","Like next() except that it also stores the last seen token …","Like Self::bump but errors with <code>err</code> pointing to the latest …","Like Self::bump but errors if the token is not <code>typ</code>","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Peeks into the next token without advancing the iterator.","","","","","","TAST for Typed-AST. Not sure how else to call this, this …","The environment we use to type check.","Some type information on local variables that we want to …","This takes the AST produced by the parser, and performs …","","","","","","","","","","","","","","","","","","","","","A variable becomes disabled once we exit its scope.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieves type information on a variable, given a name. If …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a scope is a prefix of our scope.","","If the variable can be mutated or not.","Enters a scoped block.","","Creates a new TypeEnv","","Exits a scoped block.","The span of the variable declaration.","Stores type information about a local variable. Note that …","","","","","","","","","Some type information.","","","","","","","","An array or a tuple is represetend as a list of other …","A cell in the execution trace.","the equivalent of CellVars but for witness generation","An internal variable that relates to a specific cell (of …","A constant value.","Represents a cell in the execution trace.","We pack Constant and CellVar in the same enum because we …","A constant value created in a noname program","Or it’s a constant (for example, I wrote <code>2</code> in the code).","A public or private input to the function There’s an …","Either it’s a hint and can be computed from the outside.","The signature of a hint function","Returns the inverse of the given variable. Note that it …","Or it’s a linear combination of internal circuit …","","A public output. This is tracked separately as public …","A struct is represented as a mapping between field names …","A variable’s actual value in the witness can be computed …","Represents a variable in the noname language, or an …","A variable in a program can have different shapes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Recursively search if there’s a constant value somewhere …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","The type of variable.","","","","","","","","","","","","","","The span that created the constant.","The span that created the variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The actual value.","","","","","","","","","","","","","","","","","","","","","","","","The compiled circuit.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","kimchi uses a transposed witness","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,17,0,0,0,21,17,21,0,11,11,11,11,11,19,11,17,26,20,21,11,19,17,26,20,21,11,19,17,20,21,19,17,20,21,19,20,26,20,11,11,11,19,17,26,20,21,11,19,17,26,20,21,11,19,17,26,20,21,11,19,20,20,11,17,26,20,20,21,11,19,17,26,20,21,11,19,11,19,17,26,20,21,11,19,17,26,20,21,11,19,19,11,19,19,11,11,26,11,20,19,11,11,11,19,20,11,11,26,26,17,20,21,19,20,17,26,20,21,11,19,17,26,20,21,11,19,26,17,26,20,21,11,19,17,26,20,21,11,19,11,11,88,89,0,13,13,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,13,13,13,13,13,33,33,33,33,33,33,33,33,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,32,33,32,33,32,33,32,33,32,33,32,32,33,33,32,33,33,33,33,32,32,33,32,33,32,32,32,33,33,32,32,33,32,33,32,33,32,33,32,33,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,96,97,101,107,116,117,119,120,121,120,120,121,120,0,0,0,0,0,122,43,0,0,0,43,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,42,43,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,123,124,123,124,45,0,0,46,46,0,46,45,46,45,45,45,45,46,45,46,45,46,45,46,46,45,46,46,45,46,45,46,45,0,46,46,125,45,46,46,45,46,45,46,45,46,45,126,127,49,49,49,49,49,48,49,49,49,49,48,49,49,48,48,48,49,49,49,48,48,0,49,49,49,49,49,48,0,49,48,49,49,49,48,48,49,49,49,49,49,49,49,48,0,0,48,49,48,51,48,49,50,51,48,49,50,48,49,50,48,49,50,51,51,48,49,50,51,48,49,50,51,48,49,50,48,49,48,49,51,48,48,49,49,50,51,48,49,50,51,48,49,50,51,48,49,50,50,49,48,50,50,48,49,50,48,49,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,128,129,130,131,132,133,134,65,0,57,54,56,56,69,56,0,0,54,56,54,56,57,57,57,69,71,0,71,54,0,56,57,57,0,69,0,54,56,69,0,0,71,0,0,56,57,56,56,0,0,0,60,0,69,0,0,0,0,0,71,56,57,0,0,71,58,66,62,66,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,44,53,54,55,56,57,58,59,60,61,62,44,53,54,55,56,57,58,59,60,61,62,55,64,59,65,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,67,54,54,73,64,44,53,54,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,44,66,60,62,0,0,53,55,61,68,70,64,64,44,58,66,62,72,73,53,55,58,59,66,68,72,73,65,66,59,66,66,57,66,44,0,44,67,53,58,66,44,53,55,59,61,66,62,67,68,70,72,73,74,67,44,53,54,55,56,57,58,59,60,61,62,54,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,55,62,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,59,72,74,64,44,53,54,55,56,57,58,59,60,61,66,62,67,68,69,70,71,72,73,65,74,135,136,137,138,139,140,141,142,143,135,139,141,142,135,144,145,144,145,146,147,148,149,150,151,152,153,154,155,155,154,155,154,156,157,157,0,0,77,77,78,77,78,0,77,78,77,78,77,78,77,78,77,78,77,78,77,77,78,77,78,77,78,78,77,78,0,0,81,81,81,81,0,81,81,81,81,81,81,81,81,81,0,0,81,81,81,81,81,81,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,27,27,27,82,63,27,82,63,27,27,82,63,82,63,63,27,82,63,27,82,63,82,27,82,63,82,63,27,82,63,63,63,27,27,82,63,27,82,63,63,63,82,63,82,63,82,63,82,63,82,63,27,82,63,27,82,63,82,27,82,63,0,27,82,63,41,84,0,0,84,0,41,0,29,29,29,0,29,29,29,29,41,0,0,0,12,29,16,83,84,41,12,85,29,16,83,84,41,12,85,16,83,84,41,12,85,16,83,84,41,12,85,41,12,12,83,84,84,29,16,83,84,41,12,85,29,16,83,84,41,12,85,29,16,83,84,41,12,85,16,16,12,29,16,83,84,41,12,85,29,29,29,16,83,84,41,12,85,12,16,41,12,16,84,12,16,29,16,83,84,41,12,85,29,16,83,84,41,12,85,41,12,84,41,12,83,83,12,41,12,16,83,12,85,12,41,41,12,12,12,16,83,12,16,83,84,41,12,85,29,16,83,84,41,12,85,29,16,83,84,41,12,85,29,16,83,84,41,12,85,83,85,29,16,83,84,41,12,85,158,159,160,161,162,163,164,165,166,162,163,165,167,168,169,0,0,0,86,87,28,86,87,28,86,86,28,87,86,87,28,28,86,87,28,86,87,28,86,86,87,28,86,28,86,87,28,86,87,28,86,87,87,87,87,28,86,87,28,86,87,28,86,86,87,28,86],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],[[2,[1]]]],[3],[3],[3],[[]],[[4,5,6],7],[[],3],[2,6],[[]],[2,6],[2,8],[2,3],[2,3],[[],9],[[],9],[[],10],[[]],[[11,12,12,13],12],[14,6],[[11,12,13],12],0,0,0,0,0,0,0,0,0,0,[[11,[15,[4]],14,13],16],[[11,4,17,[18,[[15,[16]]]],[18,[14]],13]],[[11,7,3,13],12],[[11,7,3,13],12],[[11,3,13]],[[19,7,12]],[[11,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[20,20],[21,21],[19,19],[[]],[[]],[[]],[[]],[[20,20],22],0,0,[11],[[11,16,13],[[23,[14]]]],[[],11],[[],19],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[20,20],6],[[],6],0,[[17,24],25],[[26,24],25],[[20,24],25],[[20,24],25],[[21,24],25],[[11,24],25],[[19,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[27,4],[[23,[28]]]],[[19,4],12],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[19,3],6],0,[19],[[],19],[[11,29,13],16],0,0,[11,3],[[20,20],[[15,[22]]]],[19],0,0,0,[[19,4,12]],0,0,0,0,[[26,3],[[30,[14]]]],[[]],[[]],[[]],[[]],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[4,[[23,[28]]]],0,0,0,0,0,[[]],[[]],[13,13],[[]],[[13,13],22],[[],13],[3],[3],[3],[13,3],[[13,13],6],[[],6],[[13,24],25],[[]],[[],31],[13],[[],3],[[]],[13,6],[13,3],[[13,13],13],[[13,13],[[15,[22]]]],[13,3],[14,7],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3],[3],[3],[3],[3],[3],[[32,24],25],[[32,24],25],[[33,24],25],[[33,24],25],[[]],[[]],[34,33],[35,33],[36,33],[32,[[15,[[38,[37]]]]]],[[],3],[[],3],[[]],[[]],0,[32,[[15,[[38,[8]]]]]],[39],[39],[33,[[15,[40]]]],0,[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,12,12,13],12],[[11,41,41,13],12],[[11,12,12,13],12],0,[[],14],[[],7],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],42],[3],[3],[3],[3],[3],[3],[[43,24],25],[[42,24],25],[[]],[[]],0,[[],3],[[],3],[[]],[[]],0,0,[42,23],[[42,44],23],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[45,45],[[]],[[],45],[3],[3],[3],[3],[3],[3],[[46,24],25],[[46,24],25],[[45,24],25],[[]],[47,46],[[]],[[],3],[[],3],[[]],[[]],[4,[[9,[45,46]]]],[39],[46,[[15,[40]]]],[[],7],[[]],[[],7],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,48],[49,49],[50,50],[[]],[[]],[[]],[[],51],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[48,48],6],[[49,49],6],[[],6],[[],6],[[51,24],25],[[48,24],25],[[48,24],25],[[49,24],25],[[49,24],25],[[50,24],25],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],0,[[49,51,3],50],[4,[[15,[48]]]],[4,[[23,[52]]]],0,[[]],[[]],[[]],[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,42,63],[[23,[[15,[54]]]]]],[[],64],[[],59],[[],65],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],0,[[54,54],6],[[],6],0,[[64,24],25],[[44,24],25],[[53,24],25],[[54,24],25],[[54,24],25],[[55,24],25],[[56,24],25],[[57,24],25],[[58,24],25],[[59,24],25],[[60,24],25],[[61,24],25],[[66,24],25],[[62,24],25],[[67,24],25],[[68,24],25],[[69,24],25],[[70,24],25],[[71,24],25],[[72,24],25],[[73,24],25],[[65,24],25],[[74,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,6],[66,6],[60,6],[62,6],[4,6],[4,6],0,0,0,0,0,[64,13],0,[44,3],0,0,0,0,0,[[64,52],[[23,[53]]]],[[64,52],[[23,[55]]]],[[64,52],[[23,[58]]]],[[64,52],[[23,[59]]]],[[64,52],[[23,[66]]]],[[64,52],[[23,[68]]]],[[64,52],[[23,[72]]]],[[64,52],[[23,[73]]]],[52,[[23,[65]]]],[[64,52],[[23,[[18,[62]]]]]],[[64,52],[[23,[59]]]],[[64,52],[[23,[[18,[68]]]]]],[[64,52],[[23,[[15,[53]]]]]],[[64,52],[[15,[57]]]],[[64,52],[[23,[59]]]],[[64,52],[[23,[44]]]],[[64,52],[[23,[74]]]],0,[67,[[76,[75]]]],[4,54],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[77,6],7],[[]],[[]],[[]],[[]],[4,23],[3],[3],[3],[3],[3],[3],[[]],[[]],[[],3],[[],3],[[]],[[]],[[77,45,45,6],23],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[78,[18,[14]],[80,[79]]],23],[[]],[[]],0,0,[[]],[[]],[81,81],[[]],0,[3],[3],[3],[[81,24],25],[[]],0,[[],3],[[]],0,[[],18],[44,[[23,[81]]]],0,[[]],[[],9],[[],9],[[],10],[[]],0,[[11,13],[[23,[[15,[12]]]]]],0,[[]],[[]],[[52,64],[[15,[50]]]],[[52,64,33],[[23,[50]]]],[[52,64,49],[[23,[50]]]],[3],[3],[3],[[52,24],25],[[]],[[],3],[[]],[[[18,[50]]],52],[52,[[15,[50]]]],0,[[],9],[[],9],[[],10],[[]],0,0,0,[65,[[23,[27]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[42,63,[15,[53]]],23],[[42,63,68],[[23,[[15,[54]]]]]],[82,82],[63,63],[[]],[[]],[[],63],[3],[3],[3],[3],[3],[3],0,[3],[3],[3],[[82,24],25],[[63,24],25],[[]],[[]],[[]],[[63,4],[[15,[54]]]],[[63,4],[[15,[82]]]],0,[[],3],[[],3],[[],3],[[]],[[]],[[]],[[63,3],6],[[63,4],[[15,[6]]]],0,[63],[[54,13],82],[[],63],[[54,13],82],[63],0,[[63,7,82],23],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[],10],[[42,63,44,13],[[23,[[15,[54]]]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[83,83],[84,84],[41,41],[12,12],[85,85],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[15,[84]]]],[12,[[15,[84]]]],[12,[[15,[83]]]],[[83,[15,[4]],11],16],[84,[[15,[83]]]],[84,[[15,[16]]]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[16,16],6],[[],6],[12,[[15,[5]]]],[[29,24],25],[[16,24],25],[[83,24],25],[[84,24],25],[[41,24],25],[[12,24],25],[[85,24],25],[[]],[14,29],[3,29],[[]],[[]],[[]],[[]],[[]],[[]],[[12,3],[[15,[41]]]],[[],31],[41,6],[12,6],[16],[84,[[15,[3]]]],[[12,3]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[18,[84]]]],[12,[[18,[84]]]],[84,6],[41,6],[12,6],[83,6],[83,6],0,[41,3],[12,3],[[3,13],16],[[14,13],83],[[41,13],12],[[[18,[14]]],85],[[[18,[41]],13],12],[16,41],[83,41],[[83,13],12],[[[5,[7,41]],13],12],[[16,13],12],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[86,7,85]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[28,86,16],[[23,[14]]]],[87],[[],86],[3],[3],[28],[3],[3],[3],[3],[3],[3],[3],[[86,24],25],[[]],[[]],[[]],[[28,45,45],23],[[86,4],[[18,[14]]]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[87,6],[87,3],[87],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,[[]],[[]],[[]]],"p":[[8,"Default"],[3,"OrderedHashSet"],[15,"usize"],[15,"str"],[3,"HashMap"],[15,"bool"],[3,"String"],[8,"Iterator"],[4,"Result"],[3,"TypeId"],[3,"CircuitWriter"],[3,"Var"],[3,"Span"],[6,"Field"],[4,"Option"],[3,"CellVar"],[4,"GateKind"],[3,"Vec"],[3,"LocalEnv"],[3,"Cell"],[4,"Wiring"],[4,"Ordering"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Gate"],[3,"TAST"],[3,"CompiledCircuit"],[4,"Value"],[3,"CircuitGate"],[15,"u64"],[3,"Error"],[4,"ErrorKind"],[4,"SetupError"],[4,"ProverError"],[4,"VerifyError"],[8,"Display"],[3,"Box"],[3,"Demand"],[8,"Error"],[4,"VarKind"],[3,"GlobalEnv"],[4,"FuncInScope"],[3,"Path"],[3,"Inputs"],[4,"ParsingError"],[3,"Error"],[4,"Keyword"],[4,"TokenKind"],[3,"Token"],[3,"LexerCtx"],[3,"Tokens"],[3,"Ty"],[4,"TyKind"],[3,"Expr"],[4,"ExprKind"],[4,"Op2"],[3,"FunctionSig"],[3,"Ident"],[4,"AttributeKind"],[3,"Attribute"],[3,"FuncArg"],[3,"TypeEnv"],[3,"ParserCtx"],[3,"AST"],[3,"Function"],[3,"Range"],[3,"Stmt"],[4,"StmtKind"],[3,"Root"],[4,"RootKind"],[3,"Const"],[3,"Struct"],[3,"CustomType"],[15,"u32"],[3,"Range"],[3,"ProverIndex"],[3,"VerifierIndex"],[6,"Affine"],[3,"ProverProof"],[3,"ImportedModule"],[3,"TypeInfo"],[3,"Constant"],[4,"ConstOrCell"],[3,"CellValues"],[3,"WitnessEnv"],[3,"Witness"],[13,"NotWired"],[13,"Wired"],[13,"ExpectedToken"],[13,"InvalidFunctionSignature"],[13,"ReservedType"],[13,"InvalidField"],[13,"InvalidIdentifier"],[13,"InvalidFnCall"],[13,"MismatchType"],[13,"ArgumentTypeMismatch"],[13,"FunctionReturnsType"],[13,"MissingArg"],[13,"CannotConvertToField"],[13,"ReturnTypeMismatch"],[13,"StdImport"],[13,"DuplicateModule"],[13,"UndefinedFunction"],[13,"UndefinedModule"],[13,"InvalidAttribute"],[13,"ArrayIndexOutOfBounds"],[13,"KimchiSetup"],[13,"KimchiProver"],[13,"KimchiVerifier"],[13,"InvalidWitness"],[13,"UnusedInput"],[13,"DuplicateDefinition"],[13,"LocalVariableNotFound"],[13,"MismatchStructFields"],[13,"InvalidStructField"],[13,"InvalidStructFieldType"],[13,"UndefinedStruct"],[13,"UndefinedField"],[13,"WrongArgumentType"],[13,"WrongNumberOfArguments"],[8,"PrettyField"],[13,"BuiltIn"],[13,"Library"],[8,"ExtField"],[13,"IoError"],[13,"Inputs"],[13,"Keyword"],[13,"Identifier"],[13,"Const"],[13,"Type"],[13,"BigInt"],[13,"Hex"],[13,"Comment"],[13,"Op"],[13,"Negated"],[13,"BigInt"],[13,"Identifier"],[13,"ArrayAccess"],[13,"ArrayDeclaration"],[13,"CustomTypeDeclaration"],[13,"StructAccess"],[13,"Bool"],[13,"FnCall"],[13,"Assignment"],[13,"Use"],[13,"Function"],[13,"Comment"],[13,"Struct"],[13,"Const"],[13,"Expr"],[13,"Return"],[13,"Comment"],[13,"For"],[13,"Assign"],[13,"Custom"],[13,"Array"],[13,"Const"],[13,"Cell"],[13,"Hint"],[13,"Constant"],[13,"LinearCombination"],[13,"Mul"],[13,"Inverse"],[13,"External"],[13,"PublicOutput"],[13,"ConstOrCell"],[13,"Struct"],[13,"ArrayOrTuple"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
