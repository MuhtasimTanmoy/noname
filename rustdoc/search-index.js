var searchIndex = JSON.parse('{\
"main":{"doc":"","t":[3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,11,11,11,11,11,11],"n":["Cli","augment_args","augment_args_for_update","borrow","borrow_mut","debug","deref","deref_mut","drop","from","from_arg_matches","from_arg_matches_mut","init","into","into_app","into_app_for_update","main","parse","path","private_inputs","public_inputs","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["main","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","prints debug information (defaults to false)","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","path to the .no file","private inputs in a JSON format using decimal values (e.g. …","public inputs in a JSON format using decimal values (e.g. {…","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4],"f":[0,[1,1],[1,1],[[]],[[]],0,[2],[2],[2],[[]],[3,[[6,[4,5]]]],[3,[[6,[4,5]]]],[[],2],[[]],[[],1],[[],1],[[],7],[[8,9,9,10],7],0,0,0,[[],6],[[],6],[[],11],[[4,3],[[6,[5]]]],[[4,3],[[6,[5]]]],[[]]],"p":[[6,"Command"],[15,"usize"],[3,"ArgMatches"],[3,"Cli"],[3,"Error"],[4,"Result"],[6,"Result"],[15,"str"],[3,"JsonInputs"],[15,"bool"],[3,"TypeId"]]},\
"noname":{"doc":"This is a high-level language to write circuits that you …","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,3,13,2,3,4,13,13,13,13,2,4,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,5,12,12,6,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,8,5,11,13,6,4,13,13,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,12,12,12,12,8,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,3,13,4,13,13,3,13,3,3,13,3,13,3,13,13,13,13,13,4,3,13,3,13,3,4,3,4,3,13,13,3,4,13,3,13,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,11,12,11,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,0,11,11,11,11,11,12,11,11,12,5,5,12,11,11,11,11,11,17,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,2,2,3,2,2,2,11,12,11,11,0,11,11,11,11,0,11,11,11,11,11,11,12,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,12,12,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,13,3,13,4,13,13,13,6,13,13,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11],"n":["asm","boolean","circuit_writer","compiler","constants","error","field","helpers","imports","inputs","lexer","parser","prover","stdlib","syntax","tokens","type_checker","var","witness","OrderedHashSet","borrow","borrow_mut","default","deref","deref_mut","drop","from","generate_asm","init","insert","into","is_empty","iter","len","pos","try_from","try_into","type_id","vzip","and","check","is_valid","not","or","Cell","CircuitWriter","DoubleGeneric","FnEnv","Gate","GateKind","NotWired","Poseidon","Ref","Var","VarInfo","VarOrRef","Wired","Wiring","add_constant","add_constant_var","add_gate","add_private_inputs","add_public_inputs","add_public_outputs","asm","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","coeffs","col","compiled_gates","compute_constant","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","equivalent","finalized","fmt","fmt","fmt","fmt","fmt","fmt","fn_env","from","from","from","from","from","from","from_var_info","generate_circuit","get_constant","init","init","init","init","init","init","into","into","into","into","into","into","main","new","new_internal_var","next_variable","note","num_gates","partial_cmp","private_input_indices","public_input_size","public_output","row","rows_of_vars","source","span","struct_info","to_kimchi_gate","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","wiring","witness_vars","0","len","start","var_name","0","0","FnEnv","VarInfo","add_var","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_var","init","init","into","into","is_in_scope","mutable","nest","new","new","pop","reassign","reassign_range","reassign_var","reassign_var_range","to_owned","to_owned","try_from","try_from","try_into","try_into","typ","type_id","type_id","var","vzip","vzip","compile","0","1","Field","NUM_REGISTERS","Span","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deref_mut","drop","end","eq","equivalent","fmt","from","get_hash","hash","init","into","is_empty","len","merge_with","partial_cmp","start","to_dec_string","to_owned","try_from","try_into","type_id","vzip","ArgumentTypeMismatch","ArrayAccessOnNonArray","ArrayIndexOutOfBounds","AssertionFailed","AssignmentToImmutableVariable","CannotComputeExpression","CannotConvertToField","ConstArgumentNotForMain","ConstDeclarationAfterStructOrFunction","ConstantInOutput","DuplicateDefinition","DuplicateModule","Error","ErrorKind","ExpectedConstant","ExpectedToken","FunctionReturnsType","InvalidArraySize","InvalidAssignmentExpression","InvalidAttribute","InvalidConstType","InvalidEndOfLine","InvalidExpression","InvalidField","InvalidFieldAccessExpression","InvalidFnCall","InvalidFunctionName","InvalidFunctionSignature","InvalidIdentifier","InvalidModule","InvalidPath","InvalidRangeSize","InvalidStatement","InvalidStructField","InvalidStructFieldType","InvalidToken","InvalidType","InvalidTypeName","InvalidWitness","KimchiProver","KimchiSetup","KimchiVerifier","LocalVariableNotFound","MethodCallOnNonCustomStruct","MismatchFunctionArguments","MismatchStructFields","MismatchType","MissingExpression","MissingParenthesis","MissingPrivateArg","MissingPublicArg","MissingReturn","MissingToken","MissingType","NoArgsInMain","NoMainFunction","NoOneLetterVariable","NoReturnExpected","NotAStaticMethod","ParsingError","PrivateInputNotUsed","PubArgumentOutsideMain","PublicOutputReserved","RecursiveMain","ReservedType","Result","ReturnTypeMismatch","SelfHasAttribute","StdImport","UndefinedField","UndefinedFunction","UndefinedModule","UndefinedStruct","UndefinedVariable","UnexpectedReturn","UnusedInput","UnusedReturnValue","UseAfterFn","WrongArgumentType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","help","init","init","into","into","kind","labels","new","provide","provide","source","span","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","arg_name","expected_ty","fn_name","observed_ty","add","equal","if_else","if_else_inner","mul","sub","PrettyField","poseidon","pretty","BuiltIn","FnHandle","FnKind","Main","Native","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","resolve_builtin_functions","resolve_imports","to_owned","try_from","try_into","type_id","vzip","0","0","0","1","0","ExtField","Inputs","InvalidField","IoError","JsonInputs","MismatchJsonArgument","ParsingError","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","fmt","from","from","from","init","init","into","into","parse_inputs","provide","source","to_dec_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","1","Ampersand","BigInt","Colon","Comma","Comment","Const","Dot","DoubleAmpersand","DoubleColon","DoubleDot","DoubleEqual","DoublePipe","Else","Equal","Exclamation","False","Fn","For","Greater","Hex","Identifier","If","In","Keyword","Keyword","LeftBracket","LeftCurlyBracket","LeftParen","Less","Let","LexerCtx","Minus","Mut","Pipe","Plus","Pub","Question","Return","RightArrow","RightBracket","RightCurlyBracket","RightParen","SemiColon","Slash","Star","Struct","Token","TokenKind","True","Use","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","kind","new_token","parse","parse","span","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","0","AST","Addition","Array","ArrayAccess","ArrayDeclaration","Assign","Assignment","Attribute","AttributeKind","BigInt","BigInt","BinaryOp","Bool","Bool","BoolAnd","BoolOr","Comment","Comment","Const","Const","Const","Custom","CustomType","CustomTypeDeclaration","Division","Equality","Expr","Expr","ExprKind","Field","FieldAccess","FnArg","FnCall","FnNameDef","FnSig","ForLoop","Function","Function","Ident","IfElse","MethodCall","Multiplication","Negated","Not","Op2","ParserCtx","Pub","Range","Return","Root","RootKind","Stmt","StmtKind","Struct","Struct","Subtraction","Ty","TyKind","Use","UsePath","Variable","arguments","attribute","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_constant","is_constant","is_constant","is_main","is_public","is_public","is_public","is_valid_fn_name","is_valid_fn_type","kind","kind","kind","kind","kind","last_span","last_token","match_expected","module","name","name","name","name","name","new","next_node_id","node_id","node_id","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_args","parse_fn_body","parse_fn_call_args","parse_fn_return_type","parse_type","parse_type_declaration","range","reserved_types","return_type","self_name","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","start","submodule","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","args","args","array","cond","else_","fields","fn_name","idx","lhs","lhs","lhs","lhs","method_name","module","module","name","op","protected","rhs","rhs","rhs","struct_name","then_","0","0","0","0","0","0","0","0","body","lhs","mutable","range","rhs","var","0","0","1","ProverIndex","VerifierIndex","asm","borrow","borrow","borrow_mut","borrow_mut","compile_and_prove","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","is_empty","len","prove","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","BUILTIN_FNS","ImportedModule","borrow","borrow_mut","clone","clone_into","crypto","deref","deref_mut","drop","fmt","from","functions","init","into","name","parse_fn_sigs","parse_std_import","span","to_owned","try_from","try_into","type_id","vzip","CRYPTO_FNS","poseidon","is_hexadecimal","is_identifier","is_identifier_or_type","is_numeric","is_type","Tokens","borrow","borrow_mut","bump","bump_err","bump_expected","bump_ident","deref","deref_mut","drop","fmt","from","init","into","new","peek","peeked","try_from","try_into","type_id","vzip","FnInfo","StructInfo","TAST","TypeChecker","TypeInfo","TypedFnEnv","analyze","ast","borrow","borrow_mut","checker","deref","deref_mut","drop","fmt","fn_env","from","init","into","try_from","try_into","type_id","typed_global_env","vzip","FnInfo","StructInfo","TypeChecker","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_block","check_fn_call","check_stmt","clone","clone","clone_into","clone_into","constants","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","expr_type","fields","fmt","fmt","fmt","from","from","from","functions","has_main","import","init","init","init","into","into","into","kind","methods","modules","name","node_type","node_types","resolve_global_imports","sig","size_of","span","struct_info","structs","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","TypeInfo","TypedFnEnv","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constant","default","deref","deref","deref_mut","deref_mut","disabled","drop","drop","fmt","fmt","from","from","get_type","get_type_info","init","init","into","into","is_in_scope","mutable","mutable","nest","new","new","new_cst","new_mut","pop","span","store_type","to_owned","to_owned","try_from","try_from","try_into","try_into","typ","type_id","type_id","vzip","vzip","Cell","CellVar","Const","ConstOrCell","Constant","External","Hint","HintFn","Inverse","LinearCombination","Mul","PublicOutput","Scale","Value","Var","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constant","cst","cvar","cvars","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_hash","hash","idx","index","index","init","init","init","init","into","into","into","into","is_const","is_empty","iter","len","new","new","new_constant","new_cvar","new_var","range","span","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","1","1","1","1","CompiledCircuit","Witness","WitnessEnv","add_value","asm","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_values","circuit","compiled_gates","compute_var","debug","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","generate_witness","get_external","init","init","init","into","into","into","is_empty","len","parse_single_input","to_kimchi_witness","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var_values","vzip","vzip","vzip"],"q":["noname","","","","","","","","","","","","","","","","","","","noname::asm","","","","","","","","","","","","","","","","","","","","noname::boolean","","","","","noname::circuit_writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::circuit_writer::VarOrRef","","","","noname::circuit_writer::Wiring","","noname::circuit_writer::fn_env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::compiler","noname::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::error::ErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::field","","","","","","noname::helpers","","","noname::imports","","","","","","","","","","","","","","","","","","","","","","","noname::imports::FnKind","","","","noname::inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::inputs::ParsingError","","","","","noname::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::lexer::TokenKind","","","","","noname::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::parser::ExprKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::parser::RootKind","","","","","noname::parser::StmtKind","","","","","","","","","noname::parser::TyKind","","","noname::prover","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::stdlib","","","","","","","","","","","","","","","","","","","","","","","","noname::stdlib::crypto","","noname::syntax","","","","","noname::tokens","","","","","","","","","","","","","","","","","","","","","noname::type_checker","","","","","","","","","","","","","","","","","","","","","","","","noname::type_checker::checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::type_checker::fn_env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::var","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::var::ConstOrCell","","noname::var::Value","","","","","","","","","","","","noname::witness","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ASM-like language:","Custom types","","","","","","","","Used to parse public and private inputs to a program.","","","This module contains the prover.","","A number of helper function to check the syntax of some …","Since std::iter::Peekable in Rust advances the iterator, I …","","","","Very dumb way to write an ordered hash set.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Not yet wired (just indicates the position of the cell …","","A reference to a noname variable in the environment. …","A Var.","","Represents a variable in the circuit, or a reference to …","The wiring (associated to different spans)","","This should be called only when you want to constrain a …","Stores type information about a local variable. Note that …","creates a new gate, and the associated row in the …","","","","","","","","","","","","","","","","","","","","","","","","col -&gt; (row, col) Coefficients","","Returns the compiled gates of the circuit.","","","","","","","","","","","","","","","","","","","","","","","Once this is set, you can generate a witness (and can’t …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Retrieves type information on a constantiable, given a …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Used during the witness generation to check public and …","Creates a global environment from the one created by the …","","This is used to give a distinct number to each variable …","A note on why this was added","","","Indexes used by the private inputs (this is useful to …","Size of the public input.","If a public output is set, this will be used to store its …","","The execution trace table with vars as placeholders. It is …","The source code that created this circuit. Useful for …","The place in the original source code that created that …","","","","","","","","","","","","","","","","","","","Type of gate","","","","","","","Returns the value within the variable or pointer. If it is …","","","","","","","The wiring of the circuit. It is created during circuit …","This is how you compute the value of each variable during …","","","","","","","Is used to store functions’ scoped variables. This …","Information about a variable.","Stores type information about a local variable. Note that …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves type information on a variable, given a name. If …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a scope is a prefix of our scope.","","Enters a scoped block.","","Creates a new FnEnv","Exits a scoped block.","","","","Same as Self::reassign_var, but only reassigns a specific …","","","","","","","We keep track of the type of variables, eventhough we’re …","","","The variable.","","","","","","We use the scalar field of Vesta as our circuit field.","Number of columns in the execution trace.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","An error in noname.","The type of error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The type of error.","","Creates a new [Error] from an ErrorKind.","","","","Indicate where the error occurred in the source code.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two field elements","This takes variables that can be anything, and returns a …","","","Multiplies two field elements","Subtracts two variables, we only support variables that …","A trait to display Field in pretty ways.","","Print a field in a negative form if it’s past the half …","A built-in is just a handle to a function written in Rust.","An actual handle to the internal function to call to …","The different types of a noname function.","For the main function, we don’t need the AST, just the …","A native function is represented as an AST.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","An input is a name, and a list of field elements (in …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Allows constants to be defined","","","","","","","The <code>else</code> keyword","","","The boolean value <code>false</code>","A function","The <code>for</code> keyword","","","","The <code>if</code> keyword","The <code>in</code> keyword for iterating","","","","","","","New variable","","","The <code>mut</code> keyword for mutable variables","","","Public input","","Return from a function","","","","","","","","Allows custom structs to be defined","","","The boolean value <code>true</code>","Importing a library","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An array of a fixed size.","An array access, for example: <code>lhs[idx]</code>","<code>[ ... ]</code>","","<code>let lhs = rhs</code>","","","This could be the same as Field, but we use this to also …","any numbers","<code>lhs &lt;op&gt; rhs</code>","A boolean (<code>true</code> or <code>false</code>).","<code>true</code> or <code>false</code>","","","","","","","","Custom / user-defined types","","<code>name { fields }</code>","","","","","","The main primitive type. ’Nuf said.","<code>lhs.rhs</code>","","<code>lhs(args)</code>","Represents the name of a function.","","","","","Any kind of text that can represent a type, a variable, a …","<code>if cond { then_ } else { else_ }</code>","<code>lhs.method_name(args)</code>","","<code>-expr</code>","<code>!bool_expr</code>","","A context for the parser.","","","","Things you can have in a scope (including the root scope).","","","","","","","","","","","a variable or a type. For example, <code>mod::A</code>, <code>x</code>, <code>y</code>, etc.","(pub, ident, typeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Used mainly for error reporting, when we don’t have a …","","","","","The name of the function.","","","","Returns a new unique node id.","A counter used to uniquely identify different nodes in the …","","","Parses until it finds something it doesn’t know, then …","","","Parse a function, without the <code>fn</code> keyword.","","Returns a list of statement parsed until seeing the end of …","","","","","","","","","","","","","","The name of the type that this function is implemented on.","","","","","","","","The span of the function.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","is it surrounded by parenthesis?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","returns a proof and a public output","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Takes a list of function signatures (as strings) and their …","Parses the rest of a <code>use std::</code> statement. Returns a list …","","","","","","","","","Returns true if the given string is an hexadecimal string …","Returns true if the given string is an identifier (starts …","Returns true if the given string is an identifier or type","Returns true if the given string is a number in decimal.","Returns true if the given string is a type (first letter …","","","","Like next() except that it also stores the last seen token …","Like Self::bump but errors with <code>err</code> pointing to the latest …","Like Self::bump but errors if the token is not <code>typ</code>","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Peeks into the next token without advancing the iterator.","","","","","","","","TAST for Typed-AST. Not sure how else to call this, this …","","","","This takes the AST produced by the parser, and performs …","","","","","","","","","This module defines the context (or environment) that gets …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Keeps track of the signature of a user-defined function.","Keeps track of the signature of a user-defined struct.","The environment we use to type check a noname program.","","","","","","","","type checks a function call. Note that this can also be a …","","","","","","Constants declared in this module.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the functions present in the scope contains at least the …","If there’s a main function in this module, then this is …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","stores the imported modules","","","Mapping from node id to TyKind. This can be used by the …","","","Returns the number of field elements contained in the …","","","Custom structs type information and ASTs for methods.","","","","","","","","","","","","","","","Some type information on local variables that we want to …","The environment we use to type check functions.","","","","","","","","","If the variable is a constant or not.","","","","","","A variable becomes disabled once we exit its scope. We do …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieves type information on a variable, given a name. If …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a scope is a prefix of our scope.","","If the variable can be mutated or not.","Enters a scoped block.","","Creates a new TypeEnv","","","Exits a scoped block.","The span of the variable declaration.","Stores type information about a local variable. Note that …","","","","","","","Some type information.","","","","","A cell in the execution trace.","An internal variable that relates to a specific cell (of …","A constant value.","Represents a cell in the execution trace.","Or it’s a constant (for example, I wrote <code>2</code> in the code).","A public or private input to the function There’s an …","Either it’s a hint and can be computed from the outside.","The signature of a hint function","Returns the inverse of the given variable. Note that it …","Or it’s a linear combination of internal circuit …","","A public output. This is tracked separately as public …","","A variable’s actual value in the witness can be computed …","Represents a variable in the noname language, or an …","","","","","","","","","","","","","","","","","","The type of variable.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The span that created the variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The compiled circuit.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","kimchi uses a transposed witness","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,18,0,0,0,21,18,28,28,0,0,21,0,11,11,11,11,11,11,11,28,18,26,20,21,11,28,18,26,20,21,11,18,20,21,18,20,21,20,26,20,11,11,11,28,18,26,20,21,11,28,18,26,20,21,11,28,18,26,20,21,11,20,20,11,18,26,20,20,21,11,0,28,18,26,20,21,11,28,11,11,28,18,26,20,21,11,28,18,26,20,21,11,11,11,11,11,26,11,20,11,11,11,20,11,11,26,11,26,18,20,21,20,28,18,26,20,21,11,28,18,26,20,21,11,26,28,18,26,20,21,11,28,28,18,26,20,21,11,11,11,92,93,93,93,94,95,0,0,35,27,35,27,35,27,35,27,35,27,35,27,35,27,35,27,35,27,35,35,27,35,27,35,35,27,35,27,35,35,27,27,35,35,27,35,27,35,27,35,27,27,35,27,27,35,0,13,13,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,13,13,13,13,13,39,39,39,39,39,39,39,39,39,39,39,39,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,38,39,38,39,38,39,38,39,38,39,38,38,39,39,38,39,39,39,39,39,38,38,39,38,39,38,38,38,38,39,39,38,38,39,38,39,38,39,38,39,38,39,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,97,105,106,111,118,127,128,130,131,131,131,131,0,0,0,0,0,0,0,0,132,48,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,48,48,48,48,48,133,134,135,133,52,0,41,41,41,0,41,0,41,52,41,52,52,41,52,41,52,52,41,52,41,41,41,41,52,41,52,41,52,0,41,41,136,41,41,52,41,52,41,52,41,52,137,138,139,140,140,55,55,55,55,55,54,55,55,55,55,55,55,54,55,55,54,54,54,55,55,55,54,54,0,55,55,55,55,55,54,0,55,54,55,55,54,55,54,55,55,55,55,55,55,55,54,0,0,54,54,57,54,55,56,57,54,55,56,54,55,56,54,55,56,57,57,54,55,56,57,54,55,56,57,54,55,56,54,55,54,55,57,54,54,55,55,56,57,54,55,56,57,54,55,56,57,54,55,56,56,55,54,56,56,54,55,56,54,55,57,54,55,56,57,54,55,56,57,54,55,56,57,54,55,56,141,142,143,144,145,74,0,62,36,61,61,72,61,0,0,36,61,61,36,61,62,62,72,76,0,65,76,36,0,61,62,62,0,72,0,36,61,0,61,0,0,72,0,76,0,61,61,62,61,61,0,0,65,0,72,0,0,0,0,0,76,62,0,0,76,0,61,63,68,67,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,73,63,64,69,74,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,70,36,36,78,73,59,36,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,65,66,68,67,65,66,68,0,0,59,60,66,71,75,73,73,36,50,63,68,69,77,78,60,73,73,60,59,60,63,64,67,69,71,50,77,78,74,67,67,0,67,0,0,70,59,63,69,67,59,60,64,66,67,68,69,70,71,75,50,77,78,79,70,50,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,36,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,68,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,64,77,79,73,59,36,60,61,62,63,64,65,66,67,68,69,70,71,72,75,50,76,77,78,74,79,146,147,148,149,150,151,152,153,154,154,155,151,153,152,156,157,158,152,151,159,159,158,158,156,157,158,155,154,160,161,162,163,164,165,166,167,168,169,169,168,169,168,170,171,171,0,0,82,82,83,82,83,0,82,83,82,83,82,83,82,83,82,83,82,83,82,82,82,82,83,82,83,82,83,83,82,83,0,0,51,51,51,51,0,51,51,51,51,51,51,51,51,51,0,0,51,51,51,51,51,51,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,0,0,29,29,29,29,0,29,29,29,29,0,29,29,29,29,29,29,29,29,0,0,0,49,33,31,49,33,31,31,31,31,49,33,49,33,31,33,31,49,33,31,49,33,31,49,33,31,31,33,49,33,31,49,33,31,31,31,31,49,33,31,49,33,31,49,33,31,33,31,31,31,49,31,49,31,31,49,33,49,33,31,49,33,31,49,33,31,49,33,31,0,0,87,86,87,86,87,86,87,86,87,86,87,86,87,86,87,87,86,87,86,87,86,86,86,87,86,87,86,86,86,87,86,87,86,87,87,86,87,86,87,86,87,86,87,86,87,87,86,87,86,12,0,12,0,32,32,32,0,32,32,32,32,32,0,0,32,17,12,14,32,17,12,14,17,12,14,17,12,14,14,12,12,14,32,17,12,14,32,17,12,14,32,17,12,14,17,17,32,17,12,14,32,32,17,12,14,14,17,17,12,14,17,32,17,12,14,32,17,12,14,12,14,14,14,17,14,14,14,14,14,17,14,17,12,14,32,17,12,14,32,17,12,14,32,17,12,14,32,17,12,14,172,173,174,175,176,177,178,179,180,181,176,177,178,180,0,0,0,89,30,90,30,89,90,30,89,89,30,30,30,90,89,90,30,89,90,30,89,90,30,89,89,90,30,89,30,89,90,30,89,90,30,89,90,90,30,90,90,30,89,90,30,89,90,30,89,89,90,30,89],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],[[2,[1]]]],[3],[3],[3],[[]],[[4,5,6],7],[[],3],[2,6],[[]],[2,6],[2,8],[2,3],[2,3],[[],9],[[],9],[[],10],[[]],[[11,12,12,13],14],[[11,12,13]],[15,6],[[11,12,13],14],[[11,12,12,13],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,[16,[4]],15,13],17],[[11,7,15,13]],[[11,4,18,[19,[[16,[17]]]],[19,[15]],13]],[[11,7,3,13],14],[[11,7,3,13],14],[[11,3,13]],[[11,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,18],[20,20],[21,21],[[]],[[]],[[]],[[20,20],22],0,0,[11],[[11,17,13],[[23,[15]]]],[[],11],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[20,20],6],[[],6],0,[[18,24],25],[[26,24],25],[[20,24],25],[[20,24],25],[[21,24],25],[[11,24],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[7,27],28],[[29,4],[[23,[30]]]],[[11,4],[[16,[27]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],0,[[4,31],11],[[11,32,13],17],0,0,[11,3],[[20,20],[[16,[22]]]],0,0,0,0,0,0,0,[[11,4],[[16,[33]]]],[[26,3],[[34,[15]]]],[[]],[[]],[[]],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[28,35],14],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[35,7,27]],[[]],[[]],[[]],[[]],[27,27],[35,35],[[]],[[]],[3],[3],[3],[3],[3],[3],[[27,24],25],[[35,24],25],[[]],[[]],[[35,4],27],[[],3],[[],3],[[]],[[]],[[35,3],6],0,[35],[[14,6,[16,[36]]],27],[5,35],[35],[[27,14],27],[[27,14,3,3],27],[[35,4,14]],[[35,4,14,3,3]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],0,[[]],[[]],[4,[[23,[30]]]],0,0,0,0,0,[[]],[[]],[13,13],[[]],[[13,13],22],[[],13],[3],[3],[3],[13,3],[[13,13],6],[[],6],[[13,24],25],[[]],[[],37],[13],[[],3],[[]],[13,6],[13,3],[[13,13],13],[[13,13],[[16,[22]]]],[13,3],[15,7],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3],[3],[3],[3],[3],[3],[[38,24],25],[[38,24],25],[[39,24],25],[[39,24],25],[[]],[40,39],[41,39],[42,39],[43,39],[[]],[38,[[16,[[45,[44]]]]]],[[],3],[[],3],[[]],[[]],0,[38,[[16,[[45,[8]]]]]],[[39,13],38],[46],[46],[39,[[16,[47]]]],0,[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,12,12,13],14],[[11,14,14,13],14],[[11,14,14,14,13],14],[[11,12,12,12,13],14],[[11,12,12,13],14],[[11,12,12,13],14],0,[[],15],[[],7],0,0,0,0,0,[[]],[[]],[48,48],[[]],[3],[3],[3],[[48,24],25],[[]],[[],3],[[]],[[],[[19,[49]]]],[50,[[23,[51]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],52],[3],[3],[3],[3],[[],[[9,[52]]]],[3],[3],[[41,24],25],[[41,24],25],[53,41],[[]],[[]],[[],3],[[],3],[[]],[[]],[4,[[9,[52,41]]]],[46],[41,[[16,[47]]]],[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[55,55],[56,56],[[]],[[]],[[]],[[],57],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[54,54],6],[[55,55],6],[[],6],[[],6],[[57,24],25],[[54,24],25],[[54,24],25],[[55,24],25],[[55,24],25],[[56,24],25],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],0,[[55,57,3],56],[4,[[16,[54]]]],[4,[[23,[58]]]],0,[[]],[[]],[[]],[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,59],[36,36],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],73],[[],63],[[],64],[[],69],[[],74],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],0,[[36,36],6],[[],6],0,[[73,24],25],[[59,24],25],[[36,24],25],[[36,24],25],[[60,24],25],[[61,24],25],[[62,24],25],[[63,24],25],[[64,24],25],[[65,24],25],[[66,24],25],[[67,24],25],[[68,24],25],[[69,24],25],[[70,24],25],[[71,24],25],[[72,24],25],[[75,24],25],[[50,24],25],[[76,24],25],[[77,24],25],[[78,24],25],[[74,24],25],[[79,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,6],[66,6],[68,6],[67,6],[65,6],[66,6],[68,6],[4,6],[4,6],0,0,0,0,0,[73,13],0,[[36,36],6],0,0,0,0,0,0,[[73,61,13],60],[73,3],0,0,[[73,58],[[23,[59]]]],[[73,58],[[23,[60]]]],[[73,58],[[23,[63]]]],[[73,58],[[23,[64]]]],[[73,58],[[23,[67]]]],[[73,58],[[23,[69]]]],[[73,58],[[23,[71]]]],[[73,58],[[23,[50]]]],[[73,58],[[23,[77]]]],[[73,58],[[23,[78]]]],[58,[[23,[74]]]],[[73,58,[16,[64]]],[[23,[[19,[68]]]]]],[[73,58],[[23,[[19,[71]]]]]],[[73,58],23],[[73,58],[[23,[[16,[59]]]]]],[[73,58],[[23,[79]]]],[[73,58,64],[[23,[60]]]],[70,[[81,[80]]]],[4,36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[82,6],7],[[]],[[]],[[]],[[]],[4,23],[3],[3],[3],[3],[3],[3],[[]],[[]],[[],3],[[],3],[[]],[[]],[82,6],[82,3],[[82,52,52,6],23],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[83,[19,[15]],[85,[84]]],23],[[]],[[]],0,0,[[]],[[]],[51,51],[[]],0,[3],[3],[3],[[51,24],25],[[]],0,[[],3],[[]],0,[[],[[19,[49]]]],[[4,13],[[23,[51]]]],0,[[]],[[],9],[[],9],[[],10],[[]],0,[[11,13],[[23,[[16,[14]]]]]],[4,6],[4,6],[4,6],[4,6],[4,6],0,[[]],[[]],[[58,73],[[16,[56]]]],[[58,73,39],[[23,[56]]]],[[58,73,55],[[23,[56]]]],[[58,73,39],[[23,[64]]]],[3],[3],[3],[[58,24],25],[[]],[[],3],[[]],[[[19,[56]]],58],[58,[[16,[56]]]],0,[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[74,[[23,[29]]]],0,[[]],[[]],0,[3],[3],[3],[[29,24],25],0,[[]],[[],3],[[]],[[],9],[[],9],[[],10],0,[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[31,86,[16,[59]]],23],[[31,86,6,63,13],[[23,[[16,[36]]]]]],[[31,86,71],[[23,[[16,[36]]]]]],[49,49],[33,33],[[]],[[]],0,[[],33],[[],31],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[31,60],[[16,[36]]]],0,[[49,24],25],[[33,24],25],[[31,24],25],[[]],[[]],[[]],0,0,[[31,50],23],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,0,0,0,[[31,3],[[16,[36]]]],0,[31,23],[49,63],[[31,36],3],0,[[31,4],[[16,[33]]]],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[87,87],[86,86],[[]],[[]],0,[[],86],[3],[3],[3],[3],0,[3],[3],[[87,24],25],[[86,24],25],[[]],[[]],[[86,4],[[16,[36]]]],[[86,4],[[16,[87]]]],[[],3],[[],3],[[]],[[]],[[86,3],6],[[86,4],[[16,[6]]]],0,[86],[[36,13],87],[[],86],[[36,13],87],[[36,13],87],[86],0,[[86,7,87],23],[[]],[[]],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[12,12],[14,14],[[]],[[]],[[]],[14,[[16,[15]]]],[12,[[16,[15]]]],[12,[[16,[17]]]],0,[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[17,17],6],[[],6],[[32,24],25],[[17,24],25],[[12,24],25],[[14,24],25],[15,32],[[]],[[]],[[]],[[]],[[14,3],[[16,[12]]]],[[],37],[17],[12,[[16,[3]]]],[[14,3]],0,[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[12,6],[14,6],[14,[[88,[12]]]],[14,3],[[3,13],17],[[[19,[12]],13],14],[[15,13],14],[[12,13],14],[[17,13],14],[[14,3,3]],0,0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[89,7,[19,[15]]]],[[30,6],7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[30],[[30,89,17],[[23,[15]]]],[90],[[],89],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[89,24],25],[[]],[[]],[[]],[[30,52,52],23],[[89,4],[[19,[15]]]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[90,6],[90,3],[[30,91,36],[[9,[[19,[15]],41]]]],[90],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,[[]],[[]],[[]]],"p":[[8,"Default"],[3,"OrderedHashSet"],[15,"usize"],[15,"str"],[3,"HashMap"],[15,"bool"],[3,"String"],[8,"Iterator"],[4,"Result"],[3,"TypeId"],[3,"CircuitWriter"],[4,"ConstOrCell"],[3,"Span"],[3,"Var"],[6,"Field"],[4,"Option"],[3,"CellVar"],[4,"GateKind"],[3,"Vec"],[3,"Cell"],[4,"Wiring"],[4,"Ordering"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"Gate"],[3,"VarInfo"],[4,"VarOrRef"],[3,"TAST"],[3,"CompiledCircuit"],[3,"TypeChecker"],[4,"Value"],[3,"StructInfo"],[3,"CircuitGate"],[3,"FnEnv"],[4,"TyKind"],[15,"u64"],[3,"Error"],[4,"ErrorKind"],[4,"SetupError"],[4,"ParsingError"],[4,"VerifyError"],[4,"ProverError"],[8,"Display"],[3,"Box"],[3,"Demand"],[8,"Error"],[4,"FnKind"],[3,"FnInfo"],[3,"UsePath"],[3,"ImportedModule"],[3,"JsonInputs"],[3,"Error"],[4,"Keyword"],[4,"TokenKind"],[3,"Token"],[3,"LexerCtx"],[3,"Tokens"],[3,"Ty"],[3,"Expr"],[4,"ExprKind"],[4,"Op2"],[3,"FnSig"],[3,"Ident"],[4,"AttributeKind"],[3,"Attribute"],[3,"Function"],[3,"FnArg"],[3,"FnNameDef"],[3,"Range"],[3,"Stmt"],[4,"StmtKind"],[3,"ParserCtx"],[3,"AST"],[3,"Root"],[4,"RootKind"],[3,"Const"],[3,"Struct"],[3,"CustomType"],[15,"u32"],[3,"Range"],[3,"ProverIndex"],[3,"VerifierIndex"],[6,"Affine"],[3,"ProverProof"],[3,"TypedFnEnv"],[3,"TypeInfo"],[3,"Iter"],[3,"WitnessEnv"],[3,"Witness"],[4,"Value"],[13,"Var"],[13,"Ref"],[13,"NotWired"],[13,"Wired"],[13,"ParsingError"],[13,"MismatchFunctionArguments"],[13,"ExpectedToken"],[13,"InvalidPath"],[13,"InvalidFunctionSignature"],[13,"ReservedType"],[13,"InvalidField"],[13,"InvalidIdentifier"],[13,"InvalidFnCall"],[13,"MismatchType"],[13,"ArgumentTypeMismatch"],[13,"FunctionReturnsType"],[13,"MissingPublicArg"],[13,"MissingPrivateArg"],[13,"CannotConvertToField"],[13,"ReturnTypeMismatch"],[13,"StdImport"],[13,"DuplicateModule"],[13,"PublicOutputReserved"],[13,"UndefinedFunction"],[13,"UndefinedModule"],[13,"InvalidAttribute"],[13,"ArrayIndexOutOfBounds"],[13,"KimchiSetup"],[13,"KimchiProver"],[13,"KimchiVerifier"],[13,"InvalidWitness"],[13,"UnusedInput"],[13,"DuplicateDefinition"],[13,"LocalVariableNotFound"],[13,"MismatchStructFields"],[13,"InvalidStructField"],[13,"InvalidStructFieldType"],[13,"UndefinedStruct"],[13,"UndefinedField"],[13,"WrongArgumentType"],[8,"PrettyField"],[13,"BuiltIn"],[13,"Native"],[13,"Main"],[8,"ExtField"],[13,"IoError"],[13,"Inputs"],[13,"InvalidField"],[13,"MismatchJsonArgument"],[13,"Keyword"],[13,"Identifier"],[13,"BigInt"],[13,"Hex"],[13,"Comment"],[13,"Negated"],[13,"Not"],[13,"BigInt"],[13,"ArrayDeclaration"],[13,"Bool"],[13,"FnCall"],[13,"MethodCall"],[13,"ArrayAccess"],[13,"IfElse"],[13,"CustomTypeDeclaration"],[13,"Assignment"],[13,"FieldAccess"],[13,"BinaryOp"],[13,"Variable"],[13,"Use"],[13,"Function"],[13,"Comment"],[13,"Struct"],[13,"Const"],[13,"Expr"],[13,"Return"],[13,"Comment"],[13,"ForLoop"],[13,"Assign"],[13,"Custom"],[13,"Array"],[13,"Const"],[13,"Cell"],[13,"Hint"],[13,"Constant"],[13,"LinearCombination"],[13,"Mul"],[13,"Scale"],[13,"Inverse"],[13,"External"],[13,"PublicOutput"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
