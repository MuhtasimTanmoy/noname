var searchIndex = JSON.parse('{\
"noname":{"doc":"This is a high-level language to write circuits that you â€¦","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,3,3,13,3,4,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,17,17,2,0,2,2,2,0,2,0,2,2,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,12,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,8,3,11,11,11,5,11,11,11,11,11,5,11,5,11,11,10,12,11,11,11,11,5,5,11,6,17,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,0,0,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,8,5,11,7,13,13,3,6,4,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,13,13,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,2,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,2,2,2,2,2,3,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,0,11,11,11,11,11,11,0,11,11,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,13,13,13,13,3,4,13,13,13,13,13,3,13,13,13,13,3,3,13,4,13,3,13,3,13,3,13,3,4,13,3,13,3,4,3,4,13,3,4,13,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,17,7,17,0,5,5,17,5,5,5,5,5,5,3,2,3,2,3,2,2,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,13,3,13,4,13,13,13,6,13,13,13,13,13,13,4,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11],"n":["asm","circuit_writer","cli","compiler","constants","constraints","error","helpers","imports","inputs","lexer","name_resolution","parser","prover","serialization","stdlib","syntax","type_checker","var","witness","OrderedHashSet","borrow","borrow_mut","default","deref","deref_mut","drop","from","init","insert","into","is_empty","iter","len","pos","try_from","try_into","type_id","vzip","CircuitWriter","DebugInfo","FnEnv","Gate","GateKind","VarInfo","Wiring","add_constant","add_gate","add_local_var","add_private_inputs","add_public_inputs","add_public_outputs","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compiled_gates","compute_constant","const_info","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","error","expr_type","fmt","fmt","fn_env","fn_info","from","from","generate_asm","generate_circuit","get_local_var","init","init","into","into","main_info","new_internal_var","node_type","note","num_gates","serialize","size_of","span","struct_info","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","writer","FnEnv","VarInfo","add_local_var","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_local_var","init","init","into","into","mutable","nest","new","new","pop","reassign","reassign_local_var","reassign_range","reassign_var_range","to_owned","to_owned","try_from","try_from","try_into","try_into","typ","type_id","type_id","var","vzip","vzip","AnnotatedCell","Cell","DoubleGeneric","Gate","GateKind","NotWired","Poseidon","Wired","Wiring","Zero","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","coeffs","col","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","partial_cmp","partial_cmp","row","serialize","serialize","serialize","serialize","serialize","to_kimchi_gate","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CmdBuild","CmdCheck","CmdInit","CmdNew","CmdProve","CmdTest","CmdVerify","NONAME_DIRECTORY","PACKAGE_DIRECTORY","cmd_build","cmd_build_and_check","cmd_check","cmd_init","cmd_new","cmd_new_and_init","cmd_prove","cmd_prove_and_verify","cmd_test","cmd_verify","manifest","packages","CmdBuild","CmdCheck","CmdTest","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","cmd_build","cmd_check","cmd_test","command","command","command","command_for_update","command_for_update","command_for_update","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","init","init","init","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip","CmdInit","CmdNew","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","cmd_init","cmd_new","command","command","command_for_update","command_for_update","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","CmdProve","CmdVerify","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","cmd_prove","cmd_verify","command","command","command_for_update","command_for_update","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","Manifest","Package","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dependencies","deref","deref","deref_mut","deref_mut","description","deserialize","deserialize","drop","drop","from","from","init","init","into","into","name","package","read_manifest","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","vzip","vzip","DependencyGraph","DependencyNode","UserRepo","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","download_from_github","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","get_dep","get_dep_code","get_deps_of_package","get_hash","hash","init","init","init","init_package","into","into","into","is_lib","repo","serialize","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user","validate_package_and_get_manifest","vzip","vzip","vzip","IntoMiette","Sources","add","borrow","borrow_mut","compile","deref","deref_mut","drop","fmt","from","generate_witness","get","get_nast","init","into","into_miette","map","new","try_from","try_into","type_id","typecheck_next_file","typecheck_next_file_inner","vzip","Field","NUM_REGISTERS","Span","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deref_mut","deserialize","drop","end","eq","filename_id","fmt","from","get_hash","hash","init","into","is_empty","len","merge_with","new","partial_cmp","serialize","start","to_dec_string","to_owned","try_from","try_into","type_id","vzip","boolean","field","and","check","is_valid","not","or","add","equal","if_else","if_else_inner","mul","sub","ArgumentTypeMismatch","ArrayAccessOnNonArray","ArrayIndexOutOfBounds","AssertionFailed","AssignmentToImmutableVariable","CannotComputeExpression","CannotConvertToField","ConstArgumentNotForMain","ConstantInOutput","DuplicateDefinition","DuplicateModule","Error","ErrorKind","ExpectedConstant","ExpectedToken","FunctionReturnsType","InvalidArraySize","InvalidAssignmentExpression","InvalidAttribute","InvalidConstType","InvalidEndOfLine","InvalidExpression","InvalidField","InvalidFieldAccessExpression","InvalidFnCall","InvalidFunctionName","InvalidFunctionSignature","InvalidIdentifier","InvalidPath","InvalidRangeSize","InvalidStatement","InvalidStructField","InvalidStructFieldType","InvalidToken","InvalidType","InvalidTypeName","InvalidWitness","KimchiProver","KimchiSetup","KimchiVerifier","LocalVariableNotFound","MainFunctionInLib","MethodCallOnNonCustomStruct","MismatchFunctionArguments","MismatchStructFields","MismatchType","MissingExpression","MissingParenthesis","MissingPrivateArg","MissingPublicArg","MissingReturn","MissingToken","MissingType","NoArgsInMain","NoMainFunction","NoOneLetterVariable","NoReturnExpected","NotAStaticMethod","OrderOfConstDeclaration","OrderOfUseDeclaration","ParsingError","PrivateInputNotUsed","PubArgumentOutsideMain","PublicOutputReserved","RecursiveMain","ReservedType","Result","ReturnTypeMismatch","SelfHasAttribute","ShadowingBuiltIn","StdImport","UndefinedField","UndefinedFunction","UndefinedModule","UndefinedStruct","UndefinedVariable","UnexpectedError","UnexpectedReturn","UnknownDependency","UnknownExternalFn","UnknownExternalStruct","UnusedInput","UnusedReturnValue","UseAfterFn","WrongArgumentType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","help","init","init","into","into","into_miette","kind","label","labels","new","provide","provide","source","span","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","arg_name","expected_ty","fn_name","observed_ty","PrettyField","poseidon","pretty","BUILTIN_FNS","BuiltIn","BuiltIn","BuiltinModule","FnHandle","FnKind","Module","ModuleKind","Native","Native","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","functions","init","init","init","init","into","into","into","into","kind","name","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ExtField","Inputs","InvalidField","IoError","JsonInputs","MismatchJsonArgument","ParsingError","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","fmt","from","from","from","init","init","into","into","parse_inputs","provide","source","to_dec_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Ampersand","BigInt","Colon","Comma","Comment","Const","Dot","DoubleAmpersand","DoubleColon","DoubleDot","DoubleEqual","DoublePipe","Else","Equal","Exclamation","False","Fn","For","Greater","Hex","Identifier","If","In","Keyword","Keyword","LeftBracket","LeftCurlyBracket","LeftParen","Less","Let","LexerCtx","Minus","Mut","Pipe","Plus","Pub","Question","Return","RightArrow","RightBracket","RightCurlyBracket","RightParen","SemiColon","Slash","Star","Struct","Token","TokenKind","Tokens","True","Use","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","kind","new","new_token","parse","parse","span","span","to_owned","to_owned","to_owned","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Tokens","borrow","borrow_mut","bump","bump_err","bump_expected","bump_ident","deref","deref_mut","drop","fmt","from","init","into","new","peek","peeked","try_from","try_into","type_id","vzip","NAST","ast","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","resolve_modules","try_from","try_into","type_id","vzip","AST","ConstDef","CustomType","Expr","ExprKind","FunctionDef","Op2","ParserCtx","Root","RootKind","StructDef","UsePath","borrow","borrow","borrow_mut","borrow_mut","default","default","deref","deref","deref_mut","deref_mut","drop","drop","error","expr","filename_id","fmt","fmt","from","from","init","init","into","into","last_span","last_token","new","next_node_id","node_id","parse","structs","try_from","try_from","try_into","try_into","type_id","type_id","types","vzip","vzip","Addition","ArrayAccess","ArrayDeclaration","Assignment","BigInt","BinaryOp","Bool","BoolAnd","BoolOr","CustomTypeDeclaration","Division","Equality","Expr","ExprKind","FieldAccess","FnCall","IfElse","MethodCall","Multiplication","Negated","Not","Op2","Subtraction","Variable","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","kind","new","node_id","parse","serialize","serialize","serialize","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","args","args","array","cond","custom","else_","fields","fn_name","idx","lhs","lhs","lhs","lhs","method_name","module","module","name","op","protected","rhs","rhs","rhs","then_","CustomType","StructDef","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fields","fmt","fmt","from","from","init","init","into","into","module","module","name","name","parse","parse","serialize","span","span","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Absolute","Alias","Array","Assign","Attribute","AttributeKind","BigInt","Bool","Comment","Comment","Const","ConstDef","ConstDef","Custom","Expr","Field","FnArg","FnSig","ForLoop","FuncOrMethod","Function","FunctionDef","FunctionDef","Ident","Local","Method","Method","MethodSig","ModulePath","Pub","Range","Return","Root","RootKind","Stmt","StmtKind","StructDef","Ty","TyKind","Use","UsePath","arguments","arguments","attribute","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_constant","is_constant","is_constant","is_main","is_public","is_public","is_public","is_valid_fn_name","is_valid_fn_type","kind","kind","kind","kind","kind","match_expected","module","module","name","name","name","name","new","parse","parse","parse","parse","parse","parse","parse","parse","parse_args","parse_fn_body","parse_fn_call_args","parse_fn_return_type","parse_type_declaration","range","reserved_types","return_type","return_type","same_as","self_name","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sig","sig","span","span","span","span","span","span","span","span","span","span","span","start","submodule","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","body","lhs","mutable","range","rhs","var","module","name","ProverIndex","VerifierIndex","asm","borrow","borrow","borrow_mut","borrow_mut","compile_to_indexes","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","from","from","init","init","into","into","is_empty","len","prove","serialize","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize","BUILTIN_FNS_DEFS","CRYPTO_MODULE","QUALIFIED_BUILTINS","crypto","get_std_fn","parse_fn_sigs","CRYPTO_FNS","poseidon","is_hexadecimal","is_identifier","is_identifier_or_type","is_numeric","is_type","ConstInfo","FnInfo","FullyQualified","StructInfo","TypeChecker","TypeInfo","TypedFnEnv","analyze","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_block","check_fn_call","check_stmt","checker","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","error","fmt","fmt","fmt","fn_env","from","from","from","get_hash","hash","init","init","init","into","into","into","local","module","name","new","new","serialize","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","typ","type_id","type_id","type_id","value","vzip","vzip","vzip","FnInfo","StructInfo","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fields","fmt","fmt","from","from","init","init","into","into","kind","methods","name","serialize","serialize","sig","span","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TypeInfo","TypedFnEnv","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constant","default","deref","deref","deref_mut","deref_mut","disabled","drop","drop","fmt","fmt","from","from","get_type","get_type_info","init","init","into","into","is_in_scope","mutable","mutable","nest","new","new","new_cst","new_mut","pop","span","store_type","to_owned","to_owned","try_from","try_from","try_into","try_into","typ","type_id","type_id","vzip","vzip","Cell","CellVar","Const","ConstOrCell","Constant","External","Hint","HintFn","Inverse","LinearCombination","Mul","PublicOutput","Ref","Scale","Value","Var","Var","VarOrRef","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constant","cst","cvar","cvars","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get_hash","hash","idx","index","index","init","init","init","init","init","into","into","into","into","into","is_const","is_empty","iter","len","new","new","new_constant","new_constant_typ","new_cvar","new_var","range","serialize","serialize","serialize","serialize","span","span","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","len","start","var_name","CompiledCircuit","Witness","WitnessEnv","add_value","asm","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_values","circuit","compiled_gates","compute_var","debug","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","generate_witness","get_external","init","init","init","into","into","into","is_empty","len","main_info","parse_single_input","to_kimchi_witness","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var_values","vzip","vzip","vzip"],"q":["noname","","","","","","","","","","","","","","","","","","","","noname::asm","","","","","","","","","","","","","","","","","","","noname::circuit_writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::circuit_writer::fn_env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::circuit_writer::writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::cli","","","","","","","","","","","","","","","","","","","","","noname::cli::cmd_build_and_check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::cli::cmd_new_and_init","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::cli::cmd_prove_and_verify","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::cli::manifest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::cli::packages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::compiler","","","","","","","","","","","","","","","","","","","","","","","","","noname::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::constraints","","noname::constraints::boolean","","","","","noname::constraints::field","","","","","","noname::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::error::ErrorKind","","","","noname::helpers","","","noname::imports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::inputs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::lexer::tokens","","","","","","","","","","","","","","","","","","","","","noname::name_resolution","","","","","","","","","","","","","","","noname::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::parser::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::parser::expr::ExprKind","","","","","","","","","","","","","","","","","","","","","","","noname::parser::structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::parser::typesnoname::parser::types::StmtKind","","","","","","noname::parser::types::TyKind","","noname::prover","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::serialization","","","","","","","","","","","","","","","","noname::serialization::ser","","noname::stdlib","","","","","","noname::stdlib::crypto","","noname::syntax","","","","","noname::type_checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::type_checker::checker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::type_checker::fn_env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::var","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noname::var::VarOrRef","","","noname::witness","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ASM-like language:","","","This module is a wrapper API around noname. It is â€¦","","","","","","Used to parse public and private inputs to a program.","","","","This module contains the prover.","This adds a few utility functions for serializing and â€¦","","A number of helper function to check the syntax of some â€¦","","","","Very dumb way to write an ordered hash set.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Debug information related to a single row in a circuit.","","","","","","This should be called only when you want to constrain a â€¦","creates a new gate, and the associated row in the â€¦","","","","","","","","","","","Returns the compiled gates of the circuit.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the FnInfo for the <code>main()</code> function. This â€¦","","","A note on why this was added","","","","The place in the original source code that created that â€¦","","","","","","","","","","","","Is used to store functionsâ€™ scoped variables. This â€¦","Information about a variable.","Stores type information about a local variable. Note that â€¦","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves type information on a variable, given a name. If â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Enters a scoped block.","","Creates a new FnEnv","Exits a scoped block.","","","","Same as [Self::reassign_var], but only reassigns a â€¦","","","","","","","We keep track of the type of variables, eventhough weâ€™re â€¦","","","The variable.","","","","","","","","Not yet wired (just indicates the position of the cell â€¦","","The wiring (associated to different spans)","","","","","","","","","","","","","","","","","","","","","","","Coefficients","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Type of gate","","","","","","","","","","","","","","","","","","The directory under the user home directory containing all â€¦","The directory under NONAME_DIRECTORY containing all â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","This retrieves a dependency listed in the manifest file. â€¦","","","","","","","","","","","","","","A dependency is a Github <code>user/repo</code> pair.","","","","","","","","","","","","","","","","","","download package from github","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","This retrieves a dependency listed in the manifest file. â€¦","","Returns the dependencies of a package (given itâ€™s â€¦","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A valid package must have a valid <code>Noname.toml</code> as well as a â€¦","","","","","Contains the association between a counter and the â€¦","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Maps a filename id to its filename and source code.","","","","","","This should not be used directly. Check [get_tast] instead.","","We use the scalar field of Vesta as our circuit field.","Number of columns in the execution trace.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Custom types","","","","","","","Adds two field elements","This takes variables that can be anything, and returns a â€¦","","","Multiplies two field elements","Subtracts two variables, we only support variables that â€¦","","","","","","","","","","","","An error in noname.","The type of error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","this error is for testing. You can use it when you want to â€¦","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The type of error.","A hint as to where the error happened (e.g. type-checker, â€¦","","Creates a new [Error] from an ErrorKind.","","","","Indicate where the error occurred in the source code.","","","","","","","","","","","","","","","A trait to display Field in pretty ways.","","Print a field in a negative form if itâ€™s past the half â€¦","","A module that contains only built-in functions.","A built-in is just a handle to a function written in Rust.","","An actual handle to the internal function to call to â€¦","The different types of a noname function.","","","A module that contains both built-in functions and native â€¦","A native function is represented as an AST.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","An input is a name, and a list of field elements (in â€¦","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Allows constants to be defined","","","","","","","The <code>else</code> keyword","","","The boolean value <code>false</code>","A function","The <code>for</code> keyword","","","","The <code>if</code> keyword","The <code>in</code> keyword for iterating","","","","","","","New variable","","","The <code>mut</code> keyword for mutable variables","","","Public input","","Return from a function","","","","","","","","Allows custom structs to be defined","","","","The boolean value <code>true</code>","Importing a library","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Since std::iter::Peekable in Rust advances the iterator, I â€¦","","","","","","","","","","","","","","","","","","","","Like next() except that it also stores the last seen token â€¦","Like Self::bump but errors with <code>err</code> pointing to the latest â€¦","Like Self::bump but errors if the token is not <code>typ</code>","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Peeks into the next token without advancing the iterator.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A context for the parser.","","","","","","","","","","","","","","","","","","","The file weâ€™re parsing","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Used mainly for error reporting, when we donâ€™t have a â€¦","","Returns a new unique node id.","A counter used to uniquely identify different nodes in the â€¦","","","","","","","","","","","","","An array access, for example: <code>lhs[idx]</code>","<code>[ ... ]</code>","<code>let lhs = rhs</code>","any numbers","<code>lhs &lt;op&gt; rhs</code>","<code>true</code> or <code>false</code>","","","<code>name { fields }</code>","","","","","<code>lhs.rhs</code>","<code>lhs(args)</code>","<code>if cond { then_ } else { else_ }</code>","<code>lhs.method_name(args)</code>","","<code>-expr</code>","<code>!bool_expr</code>","","","a variable or a type. For example, <code>mod::A</code>, <code>x</code>, <code>y</code>, etc.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Parses until it finds something it doesnâ€™t know, then â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","is it surrounded by parenthesis?","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","This is a type imported from another module, â€¦","This is a type imported from another module.","An array of a fixed size.","","","","This could be the same as Field, but we use this to also â€¦","A boolean (<code>true</code> or <code>false</code>).","","","","","","Custom / user-defined types","","The main primitive type. â€™Nuf said.","","","","","Function.","","","Any kind of text that can represent a type, a variable, a â€¦","This is a local type, not imported from another module.","","Method defined on a custom type.","","The module preceding structs, functions, or variables.","","","","Things you can have in a scope (including the root scope).","","","","","","","","","(pub, ident, type)","(pub, ident, typeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Parse a function, without the <code>fn</code> keyword.","","","Returns a list of statement parsed until seeing the end of â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","returns a proof and a public output","","","","","","","","","","","You can use SerdeAs with serde_with in order to serialize â€¦","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and â€¦","","","","","","You can use this to deserialize an arkworks type with â€¦","You can use this to serialize an arkworks type with serde â€¦","","","","","","Takes a list of function signatures (as strings) and their â€¦","","","Returns true if the given string is an hexadecimal string â€¦","Returns true if the given string is an identifier (starts â€¦","Returns true if the given string is an identifier or type","Returns true if the given string is a number in decimal.","Returns true if the given string is a type (first letter â€¦","","","","","The environment we use to type check a noname program.","","","This takes the AST produced by the parser, and performs â€¦","","","","","","","","type checks a function call. Note that this can also be a â€¦","","","","","","","","","","","","","","","","","","","","","","This module defines the context (or environment) that gets â€¦","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set to <code>None</code> if the function is defined in the main module.","","","","","","","","","","","","","","","","","","","","","","Keeps track of the signature of a user-defined function.","Keeps track of the signature of a user-defined struct.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Some type information on local variables that we want to â€¦","The environment we use to type check functions.","","","","","","","","","If the variable is a constant or not.","","","","","","A variable becomes disabled once we exit its scope. We do â€¦","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Retrieves type information on a variable, given a name. If â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if a scope is a prefix of our scope.","","If the variable can be mutated or not.","Enters a scoped block.","","Creates a new TypeEnv","","","Exits a scoped block.","The span of the variable declaration.","Stores type information about a local variable. Note that â€¦","","","","","","","Some type information.","","","","","A cell in the execution trace.","An internal variable that relates to a specific cell (of â€¦","A constant value.","Represents a cell in the execution trace.","Or itâ€™s a constant (for example, I wrote <code>2</code> in the code).","A public or private input to the function Thereâ€™s an â€¦","Either itâ€™s a hint and can be computed from the outside.","The signature of a hint function","Returns the inverse of the given variable. Note that it â€¦","Or itâ€™s a linear combination of internal circuit â€¦","","A public output. This is tracked separately as public â€¦","A reference to a noname variable in the environment. â€¦","","A variableâ€™s actual value in the witness can be computed â€¦","Represents a variable in the noname language, or an â€¦","A Var.","Represents a variable in the circuit, or a reference to â€¦","","","","","","","","","","","","","","","","","","","","The type of variable.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The span that created the variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","The compiled circuit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","kimchi uses a transposed witness","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,8,8,8,8,8,8,8,20,8,20,20,20,8,8,8,8,20,8,20,20,8,20,20,8,8,8,20,0,8,8,20,8,8,8,8,20,8,20,8,8,8,20,8,20,8,20,8,20,8,20,8,20,8,20,8,20,0,0,0,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,16,18,16,18,16,18,16,18,16,18,16,18,18,16,18,18,16,0,0,14,0,0,37,14,37,0,14,14,40,36,37,38,14,40,36,37,38,14,36,37,38,14,36,37,38,36,38,40,36,14,40,36,37,38,14,40,36,37,38,14,40,36,37,38,14,40,36,37,38,36,38,14,40,36,36,37,38,14,40,36,37,38,14,40,36,37,38,14,40,36,37,38,36,38,36,14,40,36,37,38,40,14,36,37,38,36,14,40,36,37,38,14,40,36,37,38,40,14,40,36,37,38,14,40,36,37,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,47,45,46,47,45,46,47,45,46,47,0,0,0,0,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,0,0,52,51,52,51,52,51,52,51,0,0,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,0,0,53,54,53,54,53,54,53,54,0,0,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,53,54,0,0,55,56,55,56,55,56,55,56,56,55,56,55,56,56,55,56,55,56,55,56,55,56,55,56,56,55,0,55,56,55,56,55,56,55,56,56,55,56,0,0,0,57,59,58,57,59,58,57,58,57,58,57,59,58,57,59,58,57,0,57,59,58,57,57,57,59,58,57,57,59,58,0,0,0,57,57,57,59,58,59,57,59,58,0,57,57,57,58,57,57,59,58,57,59,58,57,59,58,57,0,57,59,58,0,0,31,31,31,0,31,31,31,31,31,0,31,0,31,31,119,31,31,31,31,31,0,0,31,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,24,25,24,25,24,25,24,25,24,25,25,24,24,25,24,24,24,24,24,25,25,24,25,24,21,25,25,25,25,25,24,24,25,25,24,25,24,25,24,25,24,25,24,120,120,120,120,0,0,121,0,76,74,0,0,0,0,0,76,74,75,76,73,74,75,76,73,74,73,74,73,74,75,76,73,74,75,76,73,74,74,75,76,73,74,75,76,73,74,75,76,73,74,73,75,76,73,74,75,76,73,74,75,75,74,73,74,75,76,73,74,75,76,73,74,75,76,73,74,75,76,73,74,0,66,66,66,0,66,0,66,63,66,63,63,66,63,66,63,63,66,63,66,66,66,66,63,66,63,66,63,0,66,66,122,66,66,63,66,63,66,63,66,63,79,79,79,79,79,78,79,79,79,79,79,79,78,79,79,78,78,78,79,79,79,78,78,0,79,79,79,79,79,78,0,79,78,79,79,78,79,78,79,79,79,79,79,79,79,78,0,0,0,78,78,81,78,79,80,81,78,79,80,78,79,80,78,79,80,81,78,79,80,81,78,79,80,81,78,79,80,78,79,81,81,78,78,79,79,80,81,78,79,80,81,78,79,80,81,78,79,80,80,81,79,78,80,81,80,78,79,80,78,79,0,81,78,79,80,81,78,79,80,81,78,79,80,81,78,79,80,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,0,0,0,0,0,0,0,0,0,83,85,83,85,83,85,83,85,83,85,83,85,83,0,83,83,85,83,85,83,85,83,85,83,83,83,83,83,85,0,83,85,83,85,83,85,0,83,85,88,87,87,87,87,87,87,88,88,87,88,88,0,0,87,87,87,87,88,87,87,0,88,87,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,26,26,26,26,26,87,88,26,26,87,88,26,87,88,26,87,88,26,87,88,26,87,88,123,124,125,126,127,126,127,123,125,124,128,129,130,124,123,131,131,130,130,128,129,130,126,0,0,90,89,90,89,89,89,89,90,89,90,89,89,90,89,90,90,89,90,89,90,89,90,89,90,89,90,89,90,89,89,90,89,89,90,89,90,89,90,89,90,89,92,92,27,101,0,0,27,27,101,103,93,0,103,27,101,27,0,0,101,0,96,0,103,0,92,0,96,0,0,93,0,101,0,0,0,0,103,0,0,103,0,132,97,98,133,95,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,91,92,27,84,93,94,95,96,97,98,99,100,101,60,91,92,27,84,93,94,95,96,97,98,99,100,101,60,92,84,96,97,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,91,92,27,84,93,94,95,96,97,98,99,100,101,60,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,99,92,27,84,91,92,27,27,84,93,94,95,96,97,98,99,100,101,102,60,60,103,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,92,27,84,92,27,84,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,93,94,98,95,93,94,98,0,0,91,94,97,100,102,27,60,104,132,97,98,104,84,91,84,95,96,97,100,60,104,95,95,0,95,0,99,91,132,97,27,132,91,92,27,84,93,94,95,96,97,98,99,100,101,60,133,95,133,91,84,94,95,98,99,100,102,60,104,99,60,91,92,27,84,93,94,95,96,97,98,99,100,101,60,27,60,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,98,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,84,104,133,132,91,92,27,84,93,94,95,96,97,98,99,100,101,102,60,103,104,134,135,135,134,135,134,136,136,0,0,107,107,108,107,108,0,107,108,107,108,108,107,108,107,108,107,108,107,108,107,107,107,108,107,108,107,108,107,108,108,107,108,0,137,137,137,137,137,137,137,137,137,0,137,137,137,137,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,23,22,32,23,22,32,32,32,32,0,23,23,23,22,32,23,22,32,23,22,32,23,22,32,22,32,23,22,32,0,23,22,32,22,22,23,22,32,23,22,32,22,22,22,22,32,23,22,32,23,23,22,32,23,22,32,23,23,22,32,23,23,22,32,0,0,30,35,30,35,30,35,30,35,35,30,35,30,35,30,35,30,35,35,30,35,30,35,30,35,30,35,30,35,35,30,35,30,30,30,35,30,35,30,35,30,35,30,35,0,0,114,113,114,113,114,113,114,113,114,113,114,113,114,113,114,114,113,114,113,114,113,113,113,114,113,114,113,113,113,114,113,114,113,114,114,113,114,113,114,113,114,113,114,113,114,114,113,114,113,64,0,64,0,34,34,34,0,34,34,34,34,138,34,0,0,138,0,138,13,34,64,19,138,13,34,64,19,13,64,19,13,64,19,19,64,64,19,138,13,34,64,19,138,13,34,64,19,13,34,64,19,138,13,34,64,19,13,13,34,64,19,138,13,34,34,64,19,19,13,13,64,19,13,138,13,34,64,19,138,13,34,64,19,64,19,19,19,13,19,19,19,19,19,19,13,34,64,19,13,19,13,64,19,138,13,34,64,19,138,13,34,64,19,138,13,34,64,19,138,13,34,64,19,139,139,139,0,0,0,116,33,33,116,117,33,116,117,116,33,33,33,117,116,33,116,117,33,116,117,33,116,117,116,117,33,116,117,33,116,33,116,117,33,116,117,117,117,33,33,117,33,116,117,33,116,117,33,116,117,116,33,116,117],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],[[2,[1]]]],[3],[3],[3],[[]],[[],3],[2,4],[[]],[2,4],[2,5],[2,3],[2,3],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,[[8,[10,[9]],11,12],13],[[8,9,14,[15,[[10,[13]]]],[15,[11]],12]],[[8,16,17,18]],[[8,17,3,12],19],[[8,17,3,12],19],[[8,3,12]],[[]],[[]],[[]],[[]],[20,20],[[]],[8],[[8,13,12],[[21,[11]]]],[[8,22],[[10,[23]]]],[3],[3],[3],[3],[[],[[6,[20]]]],[3],[3],[[20,20],4],[[8,24,12],25],[[8,26],[[10,[27]]]],[[8,28],29],[[20,28],29],0,[[8,22],[[10,[30]]]],[[]],[[]],[[8,31,4],17],[[32,4],[[21,[33]]]],[[8,16,9],18],[[],3],[[],3],[[]],[[]],[8,[[21,[30]]]],[[8,34,12],13],[[8,3],[[10,[27]]]],0,[8,3],[20,6],[[8,27],3],0,[[8,22],[[10,[35]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,[[16,17,18]],[[]],[[]],[[]],[[]],[18,18],[16,16],[[]],[[]],[[],16],[3],[3],[3],[3],[3],[3],[[18,28],29],[[16,28],29],[[]],[[]],[[16,9],18],[[],3],[[],3],[[]],[[]],0,[16],[[19,4,[10,[27]]],18],[[],16],[16],[[18,19],18],[[16,9,19]],[[18,19,3,3],18],[[16,9,19,3,3]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[]],[[36,36],39],[[38,38],39],0,0,[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[],[[6,[14]]]],[[],[[6,[40]]]],[[],[[6,[36]]]],[[],[[6,[37]]]],[[],[[6,[38]]]],[3],[3],[3],[3],[3],[[36,36],4],[[38,38],4],[[14,28],29],[[40,28],29],[[36,28],29],[[36,28],29],[[37,28],29],[[38,28],29],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[36,36],[[10,[39]]]],[[38,38],[[10,[39]]]],0,[14,6],[40,6],[36,6],[37,6],[38,6],[[40,3],[[41,[11]]]],[[]],[[]],[[]],[[]],[[],17],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42,42],[42,42],[42,42],[42,42],[42,42],[42,42],[[]],[[]],[[]],[[]],[[]],[[]],[[43,4,4],44],[45,44],[46,44],[47,44],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[]],[[]],[[]],[48,[[6,[45,49]]]],[48,[[6,[46,49]]]],[48,[[6,[47,49]]]],[48,[[6,[45,49]]]],[48,[[6,[46,49]]]],[48,[[6,[47,49]]]],[[],[[10,[50]]]],[[],[[10,[50]]]],[[],[[10,[50]]]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[45,48],[[6,[49]]]],[[46,48],[[6,[49]]]],[[47,48],[[6,[49]]]],[[45,48],[[6,[49]]]],[[46,48],[[6,[49]]]],[[47,48],[[6,[49]]]],[[]],[[]],[[]],0,0,[42,42],[42,42],[42,42],[42,42],[[]],[[]],[[]],[[]],[51,44],[52,44],[[],42],[[],42],[[],42],[[],42],[3],[3],[3],[3],[3],[3],[[]],[[]],[48,[[6,[52,49]]]],[48,[[6,[51,49]]]],[48,[[6,[52,49]]]],[48,[[6,[51,49]]]],[[],[[10,[50]]]],[[],[[10,[50]]]],[[],3],[[],3],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[52,48],[[6,[49]]]],[[51,48],[[6,[49]]]],[[52,48],[[6,[49]]]],[[51,48],[[6,[49]]]],[[]],[[]],0,0,[42,42],[42,42],[42,42],[42,42],[[]],[[]],[[]],[[]],[53,44],[54,44],[[],42],[[],42],[[],42],[[],42],[3],[3],[3],[3],[3],[3],[[]],[[]],[48,[[6,[53,49]]]],[48,[[6,[54,49]]]],[48,[[6,[53,49]]]],[48,[[6,[54,49]]]],[[],[[10,[50]]]],[[],[[10,[50]]]],[[],3],[[],3],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[53,48],[[6,[49]]]],[[54,48],[[6,[49]]]],[[53,48],[[6,[49]]]],[[54,48],[[6,[49]]]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[55,55],[56,56],[[]],[[]],0,[3],[3],[3],[3],0,[[],[[6,[55]]]],[[],[[6,[56]]]],[3],[3],[[]],[[]],[[],3],[[],3],[[]],[[]],0,0,[43,[[44,[55]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[58,58],[[]],[[]],[3],[3],[3],[3],[3],[3],[[],[[6,[57]]]],[57,44],[3],[3],[3],[[57,57],4],[[57,28],29],[[57,28],29],[[59,28],29],[[58,28],29],[[]],[60,57],[[]],[[]],[57,[[44,[55]]]],[57,[[44,[17]]]],[55,[[15,[57]]]],[[],61],[57],[[],3],[[],3],[[],3],[[59,57,[62,[57]]],[[44,[58]]]],[[]],[[]],[[]],[43,4],0,[57,6],[[]],[[]],[[],17],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],0,[[43,4],[[44,[55]]]],[[]],[[]],[[]],0,0,[[31,17,17],3],[[]],[[]],[[31,32,4],[[44,[33]]]],[3],[3],[3],[[31,28],29],[[]],[[33,31,63,63],44],[[31,3],10],[[[10,[57]],31,17,17,3],21],[[],3],[[]],[31,44],0,[[],31],[[],6],[[],6],[[],7],[[32,[10,[57]],31,17,17,3],[[44,[3]]]],[[32,[10,[57]],31,17,17,3],[[21,[3]]]],[[]],0,0,0,[[]],[[]],[12,12],[[]],[[12,12],39],[[],12],[3],[3],[[],[[6,[12]]]],[3],[12,3],[[12,12],4],0,[[12,28],29],[[]],[[],61],[12],[[],3],[[]],[12,4],0,[[12,12],12],[[3,3,3],12],[[12,12],[[10,[39]]]],[12,6],0,[11,17],[[]],[[],6],[[],6],[[],7],[[]],0,0,[[8,64,64,12],19],[[8,64,12]],[11,4],[[8,64,12],19],[[8,64,64,12],19],[[8,64,64,12],19],[[8,19,19,12],19],[[8,19,19,19,12],19],[[8,64,64,64,12],19],[[8,64,64,12],19],[[8,64,64,12],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3],[3],[3],[3],[3],[3],[[25,28],29],[[25,28],29],[[24,28],29],[[24,28],29],[[]],[[]],[65,24],[66,24],[67,24],[68,24],[25,[[10,[[70,[69]]]]]],[[],3],[[],3],[[]],[[]],[[21,31],44],0,0,[25,[[10,[[70,[5]]]]]],[[9,24,12],25],[71],[71],[24,[[10,[72]]]],0,[[],17],[[],17],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,[[],11],[[],17],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[74,74],[[]],[[]],[3],[3],[3],[3],[3],[3],[3],[3],[[],[[6,[74]]]],[3],[3],[3],[3],[[75,28],29],[[76,28],29],[[73,28],29],[[74,28],29],[[]],[[]],[[]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],0,0,[74,6],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],63],[3],[3],[3],[3],[[],[[6,[63]]]],[3],[3],[[66,28],29],[[66,28],29],[77,66],[[]],[[]],[[],3],[[],3],[[]],[[]],[9,[[6,[63,66]]]],[71],[66,[[10,[72]]]],[[],17],[[],17],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[79,79],[80,80],[[]],[[]],[[]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[78,78],4],[[79,79],4],[[81,24,12],25],[[81,28],29],[[78,28],29],[[78,28],29],[[79,28],29],[[79,28],29],[[80,28],29],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],0,[3,81],[[79,81,3],80],[9,[[10,[78]]]],[[3,9],[[21,[82]]]],[[81,3,3],12],0,[[]],[[]],[[]],[[],17],[[],17],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],0,[[]],[[]],[[82,83],[[10,[80]]]],[[82,83,24],[[21,[80]]]],[[82,83,79],[[21,[80]]]],[[82,83,24],[[21,[84]]]],[3],[3],[3],[[82,28],29],[[]],[[],3],[[]],[[[15,[80]]],82],[82,[[10,[80]]]],0,[[],6],[[],6],[[],7],[[]],0,0,[[]],[[]],[3],[3],[3],[[]],[[],3],[[]],[[[10,[57]],85],[[21,[86]]]],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],83],[[],85],[3],[3],[3],[3],[3],[3],[[83,24,12],25],0,0,[[83,28],29],[[85,28],29],[[]],[[]],[[],3],[[],3],[[]],[[]],[83,12],0,[[3,3],83],[83,3],0,[[3,82,3],21],0,[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[87,87],[88,88],[[]],[[]],[[]],[3],[3],[3],[3],[3],[3],[[],[[6,[26]]]],[[],[[6,[87]]]],[[],[[6,[88]]]],[3],[3],[3],[[26,28],29],[[87,28],29],[[88,28],29],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[]],[[]],[[]],0,[[83,87,12],26],0,[[83,82],[[21,[26]]]],[26,6],[87,6],[88,6],0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[89,89],[[]],[[],89],[3],[3],[3],[3],[[],[[6,[89]]]],[3],[3],0,[[90,28],29],[[89,28],29],[[]],[[]],[[],3],[[],3],[[]],[[]],0,0,0,0,[[83,82],[[21,[90]]]],[[83,82],[[21,[89]]]],[89,6],0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,91],[92,92],[27,27],[84,84],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],92],[[],84],[[],96],[[],97],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[],[[6,[91]]]],[[],[[6,[92]]]],[[],[[6,[27]]]],[[],[[6,[84]]]],[[],[[6,[93]]]],[[],[[6,[94]]]],[[],[[6,[95]]]],[[],[[6,[96]]]],[[],[[6,[97]]]],[[],[[6,[98]]]],[[],[[6,[99]]]],[[],[[6,[100]]]],[[],[[6,[101]]]],[[],[[6,[60]]]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],0,[[92,92],4],[[27,27],4],[[84,84],4],[[91,28],29],[[92,28],29],[[27,28],29],[[27,28],29],[[84,28],29],[[93,28],29],[[94,28],29],[[95,28],29],[[96,28],29],[[97,28],29],[[98,28],29],[[99,28],29],[[100,28],29],[[101,28],29],[[102,28],29],[[60,28],29],[[60,28],29],[[103,28],29],[[104,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],61],[[],61],[[],61],[92],[27],[84],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,4],[94,4],[98,4],[95,4],[93,4],[94,4],[98,4],[9,4],[9,4],0,0,0,0,0,[[27,27],4],0,0,0,0,0,0,[[17,12],84],[[83,82],[[21,[91]]]],[[83,82],[[21,[84]]]],[[83,82],[[21,[95]]]],[[83,82],21],[[83,82],[[21,[97]]]],[[83,82],[[21,[100]]]],[[83,82],[[21,[60]]]],[[83,82],[[21,[104]]]],[[83,82,96],[[21,[[15,[98]]]]]],[[83,82],[[21,[[15,[100]]]]]],[[83,82],21],[[83,82],[[21,[[10,[91]]]]]],[[83,82,84],[[21,[26]]]],[99,[[106,[105]]]],[[92,84],27],0,0,[[27,27],4],0,[91,6],[92,6],[27,6],[84,6],[93,6],[94,6],[95,6],[96,6],[97,6],[98,6],[99,6],[100,6],[101,6],[60,6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[107,31,4],17],[[]],[[]],[[]],[[]],[33,44],[3],[3],[3],[3],[[],[[6,[108]]]],[3],[3],[[]],[[]],[[],3],[[],3],[[]],[[]],[107,4],[107,3],[[107,31,63,63,4],44],[108,6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[108,[15,[11]],[110,[109]]],44],[[]],[[]],0,[[]],[[]],[3],[3],[[],6],[3],[[]],[[],3],[[]],0,[[],6],[[],6],[[],6],[[],7],[[]],[[],6],[111,6],0,0,0,0,[[9,9,12],[[21,[30]]]],[[],[[112,[17,30]]]],0,[[8,12],[[21,[[10,[19]]]]]],[9,4],[9,4],[9,4],[9,4],[9,4],0,0,0,0,0,0,0,[[32,86,4],21],[[]],[[]],[[]],[[]],[[]],[[]],[[32,113,[10,[91]]],21],[[32,113,4,97,12],[[21,[[10,[27]]]]]],[[32,113,100],[[21,[[10,[27]]]]]],0,[23,23],[[]],[3],[3],[3],[3],[3],[3],[[],[[6,[23]]]],[[],[[6,[22]]]],[[],[[6,[32]]]],[3],[3],[3],[[22,22],4],[[32,24,12],25],[[23,28],29],[[22,28],29],[[32,28],29],0,[[]],[[]],[[]],[[],61],[22],[[],3],[[],3],[[],3],[[]],[[]],[[]],[17,22],0,0,[[92,17],22],[[],32],[23,6],[22,6],[32,6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],[[],7],0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[30,30],[35,35],[[]],[[]],[[],35],[3],[3],[3],[3],[[],[[6,[30]]]],[[],[[6,[35]]]],[3],[3],0,[[30,28],29],[[35,28],29],[[]],[[]],[[],3],[[],3],[[]],[[]],0,0,0,[30,6],[35,6],[30,97],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[114,114],[113,113],[[]],[[]],0,[[],113],[3],[3],[3],[3],0,[3],[3],[[114,28],29],[[113,28],29],[[]],[[]],[[113,9],[[10,[27]]]],[[113,9],[[10,[114]]]],[[],3],[[],3],[[]],[[]],[[113,3],4],[[113,9],[[10,[4]]]],0,[113],[[27,12],114],[[],113],[[27,12],114],[[27,12],114],[113],0,[[113,17,114],21],[[]],[[]],[[],6],[[],6],[[],6],[[],6],0,[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[64,64],[19,19],[[]],[[]],[[]],[19,[[10,[11]]]],[64,[[10,[11]]]],[64,[[10,[13]]]],0,[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[],[[6,[13]]]],[[],[[6,[34]]]],[[],[[6,[64]]]],[[],[[6,[19]]]],[3],[3],[3],[3],[3],[[13,13],4],[[13,28],29],[[34,28],29],[[64,28],29],[[19,28],29],[[]],[[]],[11,34],[[]],[[]],[[]],[[19,3],[[10,[64]]]],[[],61],[13],[64,[[10,[3]]]],[[19,3]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[64,4],[19,4],[19,[[115,[64]]]],[19,3],[[3,12],13],[[[15,[64]],12],19],[[11,12],19],[[23,12],19],[[64,12],19],[[13,12],19],[[19,3,3]],[13,6],[34,6],[64,6],[19,6],0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[116,17,[15,[11]]]],[[33,31,4],17],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[33],[[33,116,13],[[21,[11]]]],[117],[[],116],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[116,28],29],[[117,28],29],[[]],[[]],[[]],[[33,63,63],21],[[116,9],[[15,[11]]]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[117,4],[117,3],[33,30],[[33,118,27],[[6,[[15,[11]],66]]]],[117],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],0,[[]],[[]],[[]]],"p":[[8,"Default"],[3,"OrderedHashSet"],[15,"usize"],[15,"bool"],[8,"Iterator"],[4,"Result"],[3,"TypeId"],[3,"CircuitWriter"],[15,"str"],[4,"Option"],[6,"Field"],[3,"Span"],[3,"CellVar"],[4,"GateKind"],[3,"Vec"],[3,"FnEnv"],[3,"String"],[3,"VarInfo"],[3,"Var"],[3,"DebugInfo"],[6,"Result"],[3,"FullyQualified"],[3,"ConstInfo"],[4,"ErrorKind"],[3,"Error"],[3,"Expr"],[4,"TyKind"],[3,"Formatter"],[6,"Result"],[3,"FnInfo"],[3,"Sources"],[3,"TypeChecker"],[3,"CompiledCircuit"],[4,"Value"],[3,"StructInfo"],[3,"Cell"],[4,"Wiring"],[3,"AnnotatedCell"],[4,"Ordering"],[3,"Gate"],[3,"CircuitGate"],[3,"Command"],[3,"Utf8PathBuf"],[6,"Result"],[3,"CmdBuild"],[3,"CmdCheck"],[3,"CmdTest"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[3,"CmdInit"],[3,"CmdNew"],[3,"CmdProve"],[3,"CmdVerify"],[3,"Manifest"],[3,"Package"],[3,"UserRepo"],[3,"DependencyNode"],[3,"DependencyGraph"],[3,"UsePath"],[15,"u64"],[3,"HashSet"],[3,"JsonInputs"],[4,"ConstOrCell"],[4,"SetupError"],[4,"ParsingError"],[4,"VerifyError"],[4,"ProverError"],[8,"Display"],[3,"Box"],[3,"Demand"],[8,"Error"],[3,"BuiltinModule"],[4,"FnKind"],[3,"Module"],[4,"ModuleKind"],[3,"Error"],[4,"Keyword"],[4,"TokenKind"],[3,"Token"],[3,"LexerCtx"],[3,"Tokens"],[3,"ParserCtx"],[3,"Ident"],[3,"AST"],[3,"NAST"],[4,"ExprKind"],[4,"Op2"],[3,"CustomType"],[3,"StructDef"],[3,"Ty"],[4,"ModulePath"],[4,"AttributeKind"],[3,"Attribute"],[3,"FunctionDef"],[4,"FuncOrMethod"],[3,"FnSig"],[3,"FnArg"],[3,"Range"],[3,"Stmt"],[4,"StmtKind"],[3,"Root"],[4,"RootKind"],[3,"ConstDef"],[15,"u32"],[3,"Range"],[3,"ProverIndex"],[3,"VerifierIndex"],[6,"Vesta"],[3,"ProverProof"],[8,"CanonicalSerialize"],[3,"HashMap"],[3,"TypedFnEnv"],[3,"TypeInfo"],[3,"Iter"],[3,"WitnessEnv"],[3,"Witness"],[4,"Value"],[8,"IntoMiette"],[13,"WrongArgumentType"],[8,"PrettyField"],[8,"ExtField"],[13,"FnCall"],[13,"MethodCall"],[13,"ArrayAccess"],[13,"IfElse"],[13,"CustomTypeDeclaration"],[13,"Assignment"],[13,"FieldAccess"],[13,"BinaryOp"],[13,"Variable"],[3,"MethodSig"],[3,"Method"],[13,"ForLoop"],[13,"Assign"],[13,"Custom"],[3,"SerdeAs"],[4,"VarOrRef"],[13,"Ref"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
